cmake_minimum_required(VERSION 3.20)
project(hansolo_thread_rebuild)

set(PROTOBUF_ROOT "/usr/local/include/protobuf25_1")
set(CMAKE_PREFIX_PATH
    ${CMAKE_PREFIX_PATH}
    ${PROTOBUF_ROOT}/lib/cmake/
)
option(protobuf_MODULE_COMPATIBLE TRUE)
set(_GRPC_GRPCPP gRPC::grpc++)


find_package(Protobuf CONFIG REQUIRED )
message(STATUS "Using protobuf ${Protobuf_VERSION}")
set(_PROTOBUF_LIBPROTOBUF protobuf::libprotobuf)
set(_REFLECTION gRPC::grpc++_reflection)
set(_PROTOBUF_PROTOC $<TARGET_FILE:protobuf::protoc>)

find_package(gRPC CONFIG REQUIRED)
message(STATUS "Using gRPC ${gRPC_VERSION}")
set(_GRPC_GRPCPP gRPC::grpc++)
set(_GRPC_CPP_PLUGIN_EXECUTABLE $<TARGET_FILE:gRPC::grpc_cpp_plugin>)
# Proto file
get_filename_component(hw_proto "./msgs/coreConnection.proto" ABSOLUTE)
get_filename_component(hw_proto_path "${hw_proto}" PATH)

set(hw_proto_srcs "${CMAKE_CURRENT_BINARY_DIR}/coreConnection.pb.cc")
set(hw_proto_hdrs "${CMAKE_CURRENT_BINARY_DIR}/coreConnection.pb.h")
set(hw_grpc_srcs "${CMAKE_CURRENT_BINARY_DIR}/coreConnection.grpc.pb.cc")
set(hw_grpc_hdrs "${CMAKE_CURRENT_BINARY_DIR}/coreConnection.grpc.pb.h")

add_custom_command(
      OUTPUT "${hw_proto_srcs}" "${hw_proto_hdrs}" "${hw_grpc_srcs}" "${hw_grpc_hdrs}"
      COMMAND ${_PROTOBUF_PROTOC}
      ARGS --grpc_out "${CMAKE_CURRENT_BINARY_DIR}"
        --cpp_out "${CMAKE_CURRENT_BINARY_DIR}"
        -I "${hw_proto_path}"
        --plugin=protoc-gen-grpc="${_GRPC_CPP_PLUGIN_EXECUTABLE}"
        "${hw_proto}"
      DEPENDS "${hw_proto}")

include_directories("${CMAKE_CURRENT_BINARY_DIR}")

# hw_grpc_proto
add_library(hw_grpc_proto
  ${hw_grpc_srcs}
  ${hw_grpc_hdrs}
  ${hw_proto_srcs}
  ${hw_proto_hdrs})
target_link_libraries(hw_grpc_proto
  ${_REFLECTION}
  ${_GRPC_GRPCPP}
  ${_PROTOBUF_LIBPROTOBUF})


add_library(hansolo_core
    ./src/hansolo_server.cc
    ./src/hansolo_client.cc
    ./src/hansolo_tcp.cc
    ./src/hansolo_tcp_thread.cc
    ../udp/src/wrap.cc
    )
target_link_libraries(hansolo_core hw_grpc_proto)


include_directories(./include)
foreach(_target
  test_core
   test_node
   test_node1
)
  add_executable(${_target} "./${_target}.cc")
  target_link_libraries(${_target}
    hansolo_core
    hw_grpc_proto
    absl::flags
    absl::flags_parse
    ${_REFLECTION}
    ${_GRPC_GRPCPP}
    ${_PROTOBUF_LIBPROTOBUF}
    pthread)
endforeach()


# add_executable(test_new_core ./test_new_core.cc )
# target_link_libraries(test_new_core )

# add_executable(test_core ./test_core.cc ${PROTO_SRCS} ${PROTO_HDRS})
# target_link_libraries(test_core
#     hansolo_core
#     ${PROTOBUF_LIBRARY}
#     pthread)

# add_executable(test_node ./test_node.cc ${PROTO_SRCS} ${PROTO_HDRS})
# target_link_libraries(test_node
#     hansolo_core
#     ${PROTOBUF_LIBRARY}
#     pthread)

# add_executable(test_node1 ./test_node1.cc ${PROTO_SRCS} ${PROTO_HDRS})
# target_link_libraries(test_node1
#     hansolo_core
#     ${PROTOBUF_LIBRARY}
#     pthread)
