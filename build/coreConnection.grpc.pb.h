// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coreConnection.proto
#ifndef GRPC_coreConnection_2eproto__INCLUDED
#define GRPC_coreConnection_2eproto__INCLUDED

#include "coreConnection.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace hansolo {

// message hansoloClient{
//    string clientName=1;
//    int32 port=2;
//    string ip_address=3;
//
// }
//
// message hansoloClients{
//   repeated hansoloClient clit = 1;
//   }
//
// message firstTouchResultToClient{
//      string clientName=1;
//      int32 success=2;
// }
//
// message publisherCreateReqFromClient{
//      string publish_name=1;
//      string  clientName=2;
// }
//
// message publisherCreateAnsToClient{
//      string clientName=1;
//      int32 port=2;
// }
//
class Register final {
 public:
  static constexpr char const* service_full_name() {
    return "hansolo.Register";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::hansolo::RegistReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegistReply>> AsyncSayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegistReply>>(AsyncSayRegistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegistReply>> PrepareAsyncSayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegistReply>>(PrepareAsyncSayRegistRaw(context, request, cq));
    }
    virtual ::grpc::Status RegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::hansolo::RegistePublisherReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegistePublisherReply>> AsyncRegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegistePublisherReply>>(AsyncRegistePublisherRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegistePublisherReply>> PrepareAsyncRegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegistePublisherReply>>(PrepareAsyncRegistePublisherRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::hansolo::RegisteSubscriberReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegisteSubscriberReply>> AsyncRegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegisteSubscriberReply>>(AsyncRegisteSubscriberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegisteSubscriberReply>> PrepareAsyncRegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegisteSubscriberReply>>(PrepareAsyncRegisteSubscriberRaw(context, request, cq));
    }
    virtual ::grpc::Status RegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::hansolo::OfflineReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::OfflineReply>> AsyncRegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::OfflineReply>>(AsyncRegistOfflineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::OfflineReply>> PrepareAsyncRegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::OfflineReply>>(PrepareAsyncRegistOfflineRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest* request, ::hansolo::RegistReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest* request, ::hansolo::RegistReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest* request, ::hansolo::RegistePublisherReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest* request, ::hansolo::RegistePublisherReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest* request, ::hansolo::RegisteSubscriberReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest* request, ::hansolo::RegisteSubscriberReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest* request, ::hansolo::OfflineReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest* request, ::hansolo::OfflineReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegistReply>* AsyncSayRegistRaw(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegistReply>* PrepareAsyncSayRegistRaw(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegistePublisherReply>* AsyncRegistePublisherRaw(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegistePublisherReply>* PrepareAsyncRegistePublisherRaw(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegisteSubscriberReply>* AsyncRegisteSubscriberRaw(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::RegisteSubscriberReply>* PrepareAsyncRegisteSubscriberRaw(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::OfflineReply>* AsyncRegistOfflineRaw(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hansolo::OfflineReply>* PrepareAsyncRegistOfflineRaw(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::hansolo::RegistReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::RegistReply>> AsyncSayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::RegistReply>>(AsyncSayRegistRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::RegistReply>> PrepareAsyncSayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::RegistReply>>(PrepareAsyncSayRegistRaw(context, request, cq));
    }
    ::grpc::Status RegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::hansolo::RegistePublisherReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::RegistePublisherReply>> AsyncRegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::RegistePublisherReply>>(AsyncRegistePublisherRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::RegistePublisherReply>> PrepareAsyncRegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::RegistePublisherReply>>(PrepareAsyncRegistePublisherRaw(context, request, cq));
    }
    ::grpc::Status RegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::hansolo::RegisteSubscriberReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::RegisteSubscriberReply>> AsyncRegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::RegisteSubscriberReply>>(AsyncRegisteSubscriberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::RegisteSubscriberReply>> PrepareAsyncRegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::RegisteSubscriberReply>>(PrepareAsyncRegisteSubscriberRaw(context, request, cq));
    }
    ::grpc::Status RegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::hansolo::OfflineReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::OfflineReply>> AsyncRegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::OfflineReply>>(AsyncRegistOfflineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::OfflineReply>> PrepareAsyncRegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hansolo::OfflineReply>>(PrepareAsyncRegistOfflineRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest* request, ::hansolo::RegistReply* response, std::function<void(::grpc::Status)>) override;
      void SayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest* request, ::hansolo::RegistReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest* request, ::hansolo::RegistePublisherReply* response, std::function<void(::grpc::Status)>) override;
      void RegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest* request, ::hansolo::RegistePublisherReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest* request, ::hansolo::RegisteSubscriberReply* response, std::function<void(::grpc::Status)>) override;
      void RegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest* request, ::hansolo::RegisteSubscriberReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest* request, ::hansolo::OfflineReply* response, std::function<void(::grpc::Status)>) override;
      void RegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest* request, ::hansolo::OfflineReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::hansolo::RegistReply>* AsyncSayRegistRaw(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hansolo::RegistReply>* PrepareAsyncSayRegistRaw(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hansolo::RegistePublisherReply>* AsyncRegistePublisherRaw(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hansolo::RegistePublisherReply>* PrepareAsyncRegistePublisherRaw(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hansolo::RegisteSubscriberReply>* AsyncRegisteSubscriberRaw(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hansolo::RegisteSubscriberReply>* PrepareAsyncRegisteSubscriberRaw(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hansolo::OfflineReply>* AsyncRegistOfflineRaw(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hansolo::OfflineReply>* PrepareAsyncRegistOfflineRaw(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayRegist_;
    const ::grpc::internal::RpcMethod rpcmethod_RegistePublisher_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisteSubscriber_;
    const ::grpc::internal::RpcMethod rpcmethod_RegistOffline_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SayRegist(::grpc::ServerContext* context, const ::hansolo::RegistRequest* request, ::hansolo::RegistReply* response);
    virtual ::grpc::Status RegistePublisher(::grpc::ServerContext* context, const ::hansolo::RegistePublisherRequest* request, ::hansolo::RegistePublisherReply* response);
    virtual ::grpc::Status RegisteSubscriber(::grpc::ServerContext* context, const ::hansolo::RegisteSubscriberRequest* request, ::hansolo::RegisteSubscriberReply* response);
    virtual ::grpc::Status RegistOffline(::grpc::ServerContext* context, const ::hansolo::OfflineRequest* request, ::hansolo::OfflineReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayRegist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayRegist() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayRegist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayRegist(::grpc::ServerContext* /*context*/, const ::hansolo::RegistRequest* /*request*/, ::hansolo::RegistReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayRegist(::grpc::ServerContext* context, ::hansolo::RegistRequest* request, ::grpc::ServerAsyncResponseWriter< ::hansolo::RegistReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegistePublisher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegistePublisher() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RegistePublisher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistePublisher(::grpc::ServerContext* /*context*/, const ::hansolo::RegistePublisherRequest* /*request*/, ::hansolo::RegistePublisherReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistePublisher(::grpc::ServerContext* context, ::hansolo::RegistePublisherRequest* request, ::grpc::ServerAsyncResponseWriter< ::hansolo::RegistePublisherReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisteSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisteSubscriber() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RegisteSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisteSubscriber(::grpc::ServerContext* /*context*/, const ::hansolo::RegisteSubscriberRequest* /*request*/, ::hansolo::RegisteSubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisteSubscriber(::grpc::ServerContext* context, ::hansolo::RegisteSubscriberRequest* request, ::grpc::ServerAsyncResponseWriter< ::hansolo::RegisteSubscriberReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegistOffline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegistOffline() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RegistOffline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistOffline(::grpc::ServerContext* /*context*/, const ::hansolo::OfflineRequest* /*request*/, ::hansolo::OfflineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistOffline(::grpc::ServerContext* context, ::hansolo::OfflineRequest* request, ::grpc::ServerAsyncResponseWriter< ::hansolo::OfflineReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayRegist<WithAsyncMethod_RegistePublisher<WithAsyncMethod_RegisteSubscriber<WithAsyncMethod_RegistOffline<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SayRegist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SayRegist() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::hansolo::RegistRequest, ::hansolo::RegistReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hansolo::RegistRequest* request, ::hansolo::RegistReply* response) { return this->SayRegist(context, request, response); }));}
    void SetMessageAllocatorFor_SayRegist(
        ::grpc::MessageAllocator< ::hansolo::RegistRequest, ::hansolo::RegistReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hansolo::RegistRequest, ::hansolo::RegistReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SayRegist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayRegist(::grpc::ServerContext* /*context*/, const ::hansolo::RegistRequest* /*request*/, ::hansolo::RegistReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayRegist(
      ::grpc::CallbackServerContext* /*context*/, const ::hansolo::RegistRequest* /*request*/, ::hansolo::RegistReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegistePublisher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegistePublisher() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::hansolo::RegistePublisherRequest, ::hansolo::RegistePublisherReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hansolo::RegistePublisherRequest* request, ::hansolo::RegistePublisherReply* response) { return this->RegistePublisher(context, request, response); }));}
    void SetMessageAllocatorFor_RegistePublisher(
        ::grpc::MessageAllocator< ::hansolo::RegistePublisherRequest, ::hansolo::RegistePublisherReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hansolo::RegistePublisherRequest, ::hansolo::RegistePublisherReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegistePublisher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistePublisher(::grpc::ServerContext* /*context*/, const ::hansolo::RegistePublisherRequest* /*request*/, ::hansolo::RegistePublisherReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegistePublisher(
      ::grpc::CallbackServerContext* /*context*/, const ::hansolo::RegistePublisherRequest* /*request*/, ::hansolo::RegistePublisherReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisteSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisteSubscriber() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::hansolo::RegisteSubscriberRequest, ::hansolo::RegisteSubscriberReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hansolo::RegisteSubscriberRequest* request, ::hansolo::RegisteSubscriberReply* response) { return this->RegisteSubscriber(context, request, response); }));}
    void SetMessageAllocatorFor_RegisteSubscriber(
        ::grpc::MessageAllocator< ::hansolo::RegisteSubscriberRequest, ::hansolo::RegisteSubscriberReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hansolo::RegisteSubscriberRequest, ::hansolo::RegisteSubscriberReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisteSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisteSubscriber(::grpc::ServerContext* /*context*/, const ::hansolo::RegisteSubscriberRequest* /*request*/, ::hansolo::RegisteSubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisteSubscriber(
      ::grpc::CallbackServerContext* /*context*/, const ::hansolo::RegisteSubscriberRequest* /*request*/, ::hansolo::RegisteSubscriberReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegistOffline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegistOffline() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::hansolo::OfflineRequest, ::hansolo::OfflineReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::hansolo::OfflineRequest* request, ::hansolo::OfflineReply* response) { return this->RegistOffline(context, request, response); }));}
    void SetMessageAllocatorFor_RegistOffline(
        ::grpc::MessageAllocator< ::hansolo::OfflineRequest, ::hansolo::OfflineReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hansolo::OfflineRequest, ::hansolo::OfflineReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegistOffline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistOffline(::grpc::ServerContext* /*context*/, const ::hansolo::OfflineRequest* /*request*/, ::hansolo::OfflineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegistOffline(
      ::grpc::CallbackServerContext* /*context*/, const ::hansolo::OfflineRequest* /*request*/, ::hansolo::OfflineReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SayRegist<WithCallbackMethod_RegistePublisher<WithCallbackMethod_RegisteSubscriber<WithCallbackMethod_RegistOffline<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayRegist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayRegist() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayRegist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayRegist(::grpc::ServerContext* /*context*/, const ::hansolo::RegistRequest* /*request*/, ::hansolo::RegistReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegistePublisher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegistePublisher() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RegistePublisher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistePublisher(::grpc::ServerContext* /*context*/, const ::hansolo::RegistePublisherRequest* /*request*/, ::hansolo::RegistePublisherReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisteSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisteSubscriber() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RegisteSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisteSubscriber(::grpc::ServerContext* /*context*/, const ::hansolo::RegisteSubscriberRequest* /*request*/, ::hansolo::RegisteSubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegistOffline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegistOffline() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RegistOffline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistOffline(::grpc::ServerContext* /*context*/, const ::hansolo::OfflineRequest* /*request*/, ::hansolo::OfflineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayRegist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayRegist() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayRegist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayRegist(::grpc::ServerContext* /*context*/, const ::hansolo::RegistRequest* /*request*/, ::hansolo::RegistReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayRegist(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegistePublisher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegistePublisher() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RegistePublisher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistePublisher(::grpc::ServerContext* /*context*/, const ::hansolo::RegistePublisherRequest* /*request*/, ::hansolo::RegistePublisherReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistePublisher(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisteSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisteSubscriber() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RegisteSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisteSubscriber(::grpc::ServerContext* /*context*/, const ::hansolo::RegisteSubscriberRequest* /*request*/, ::hansolo::RegisteSubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisteSubscriber(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegistOffline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegistOffline() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RegistOffline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistOffline(::grpc::ServerContext* /*context*/, const ::hansolo::OfflineRequest* /*request*/, ::hansolo::OfflineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistOffline(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SayRegist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SayRegist() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SayRegist(context, request, response); }));
    }
    ~WithRawCallbackMethod_SayRegist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayRegist(::grpc::ServerContext* /*context*/, const ::hansolo::RegistRequest* /*request*/, ::hansolo::RegistReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayRegist(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegistePublisher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegistePublisher() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegistePublisher(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegistePublisher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistePublisher(::grpc::ServerContext* /*context*/, const ::hansolo::RegistePublisherRequest* /*request*/, ::hansolo::RegistePublisherReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegistePublisher(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisteSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisteSubscriber() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisteSubscriber(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisteSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisteSubscriber(::grpc::ServerContext* /*context*/, const ::hansolo::RegisteSubscriberRequest* /*request*/, ::hansolo::RegisteSubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisteSubscriber(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegistOffline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegistOffline() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegistOffline(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegistOffline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegistOffline(::grpc::ServerContext* /*context*/, const ::hansolo::OfflineRequest* /*request*/, ::hansolo::OfflineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegistOffline(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayRegist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SayRegist() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hansolo::RegistRequest, ::hansolo::RegistReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hansolo::RegistRequest, ::hansolo::RegistReply>* streamer) {
                       return this->StreamedSayRegist(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SayRegist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayRegist(::grpc::ServerContext* /*context*/, const ::hansolo::RegistRequest* /*request*/, ::hansolo::RegistReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayRegist(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hansolo::RegistRequest,::hansolo::RegistReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegistePublisher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegistePublisher() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hansolo::RegistePublisherRequest, ::hansolo::RegistePublisherReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hansolo::RegistePublisherRequest, ::hansolo::RegistePublisherReply>* streamer) {
                       return this->StreamedRegistePublisher(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegistePublisher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegistePublisher(::grpc::ServerContext* /*context*/, const ::hansolo::RegistePublisherRequest* /*request*/, ::hansolo::RegistePublisherReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegistePublisher(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hansolo::RegistePublisherRequest,::hansolo::RegistePublisherReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisteSubscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisteSubscriber() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hansolo::RegisteSubscriberRequest, ::hansolo::RegisteSubscriberReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hansolo::RegisteSubscriberRequest, ::hansolo::RegisteSubscriberReply>* streamer) {
                       return this->StreamedRegisteSubscriber(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisteSubscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisteSubscriber(::grpc::ServerContext* /*context*/, const ::hansolo::RegisteSubscriberRequest* /*request*/, ::hansolo::RegisteSubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisteSubscriber(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hansolo::RegisteSubscriberRequest,::hansolo::RegisteSubscriberReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegistOffline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegistOffline() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hansolo::OfflineRequest, ::hansolo::OfflineReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hansolo::OfflineRequest, ::hansolo::OfflineReply>* streamer) {
                       return this->StreamedRegistOffline(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegistOffline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegistOffline(::grpc::ServerContext* /*context*/, const ::hansolo::OfflineRequest* /*request*/, ::hansolo::OfflineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegistOffline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hansolo::OfflineRequest,::hansolo::OfflineReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayRegist<WithStreamedUnaryMethod_RegistePublisher<WithStreamedUnaryMethod_RegisteSubscriber<WithStreamedUnaryMethod_RegistOffline<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayRegist<WithStreamedUnaryMethod_RegistePublisher<WithStreamedUnaryMethod_RegisteSubscriber<WithStreamedUnaryMethod_RegistOffline<Service > > > > StreamedService;
};

}  // namespace hansolo


#endif  // GRPC_coreConnection_2eproto__INCLUDED
