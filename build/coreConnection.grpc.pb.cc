// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coreConnection.proto

#include "coreConnection.pb.h"
#include "coreConnection.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace hansolo {

static const char* Register_method_names[] = {
  "/hansolo.Register/SayRegist",
  "/hansolo.Register/RegistePublisher",
  "/hansolo.Register/RegisteSubscriber",
  "/hansolo.Register/RegistOffline",
  "/hansolo.Register/GetTopics",
};

std::unique_ptr< Register::Stub> Register::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Register::Stub> stub(new Register::Stub(channel, options));
  return stub;
}

Register::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SayRegist_(Register_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegistePublisher_(Register_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisteSubscriber_(Register_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegistOffline_(Register_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTopics_(Register_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Register::Stub::SayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::hansolo::RegistReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hansolo::RegistRequest, ::hansolo::RegistReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayRegist_, context, request, response);
}

void Register::Stub::async::SayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest* request, ::hansolo::RegistReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hansolo::RegistRequest, ::hansolo::RegistReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayRegist_, context, request, response, std::move(f));
}

void Register::Stub::async::SayRegist(::grpc::ClientContext* context, const ::hansolo::RegistRequest* request, ::hansolo::RegistReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayRegist_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hansolo::RegistReply>* Register::Stub::PrepareAsyncSayRegistRaw(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hansolo::RegistReply, ::hansolo::RegistRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayRegist_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hansolo::RegistReply>* Register::Stub::AsyncSayRegistRaw(::grpc::ClientContext* context, const ::hansolo::RegistRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayRegistRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Register::Stub::RegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::hansolo::RegistePublisherReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hansolo::RegistePublisherRequest, ::hansolo::RegistePublisherReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegistePublisher_, context, request, response);
}

void Register::Stub::async::RegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest* request, ::hansolo::RegistePublisherReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hansolo::RegistePublisherRequest, ::hansolo::RegistePublisherReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegistePublisher_, context, request, response, std::move(f));
}

void Register::Stub::async::RegistePublisher(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest* request, ::hansolo::RegistePublisherReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegistePublisher_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hansolo::RegistePublisherReply>* Register::Stub::PrepareAsyncRegistePublisherRaw(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hansolo::RegistePublisherReply, ::hansolo::RegistePublisherRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegistePublisher_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hansolo::RegistePublisherReply>* Register::Stub::AsyncRegistePublisherRaw(::grpc::ClientContext* context, const ::hansolo::RegistePublisherRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegistePublisherRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Register::Stub::RegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::hansolo::RegisteSubscriberReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hansolo::RegisteSubscriberRequest, ::hansolo::RegisteSubscriberReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisteSubscriber_, context, request, response);
}

void Register::Stub::async::RegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest* request, ::hansolo::RegisteSubscriberReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hansolo::RegisteSubscriberRequest, ::hansolo::RegisteSubscriberReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisteSubscriber_, context, request, response, std::move(f));
}

void Register::Stub::async::RegisteSubscriber(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest* request, ::hansolo::RegisteSubscriberReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisteSubscriber_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hansolo::RegisteSubscriberReply>* Register::Stub::PrepareAsyncRegisteSubscriberRaw(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hansolo::RegisteSubscriberReply, ::hansolo::RegisteSubscriberRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisteSubscriber_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hansolo::RegisteSubscriberReply>* Register::Stub::AsyncRegisteSubscriberRaw(::grpc::ClientContext* context, const ::hansolo::RegisteSubscriberRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisteSubscriberRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Register::Stub::RegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::hansolo::OfflineReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hansolo::OfflineRequest, ::hansolo::OfflineReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegistOffline_, context, request, response);
}

void Register::Stub::async::RegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest* request, ::hansolo::OfflineReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hansolo::OfflineRequest, ::hansolo::OfflineReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegistOffline_, context, request, response, std::move(f));
}

void Register::Stub::async::RegistOffline(::grpc::ClientContext* context, const ::hansolo::OfflineRequest* request, ::hansolo::OfflineReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegistOffline_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hansolo::OfflineReply>* Register::Stub::PrepareAsyncRegistOfflineRaw(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hansolo::OfflineReply, ::hansolo::OfflineRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegistOffline_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hansolo::OfflineReply>* Register::Stub::AsyncRegistOfflineRaw(::grpc::ClientContext* context, const ::hansolo::OfflineRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegistOfflineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Register::Stub::GetTopics(::grpc::ClientContext* context, const ::hansolo::requestTopics& request, ::hansolo::replyTopics* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hansolo::requestTopics, ::hansolo::replyTopics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTopics_, context, request, response);
}

void Register::Stub::async::GetTopics(::grpc::ClientContext* context, const ::hansolo::requestTopics* request, ::hansolo::replyTopics* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hansolo::requestTopics, ::hansolo::replyTopics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTopics_, context, request, response, std::move(f));
}

void Register::Stub::async::GetTopics(::grpc::ClientContext* context, const ::hansolo::requestTopics* request, ::hansolo::replyTopics* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTopics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hansolo::replyTopics>* Register::Stub::PrepareAsyncGetTopicsRaw(::grpc::ClientContext* context, const ::hansolo::requestTopics& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hansolo::replyTopics, ::hansolo::requestTopics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTopics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hansolo::replyTopics>* Register::Stub::AsyncGetTopicsRaw(::grpc::ClientContext* context, const ::hansolo::requestTopics& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTopicsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Register::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Register_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Register::Service, ::hansolo::RegistRequest, ::hansolo::RegistReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Register::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hansolo::RegistRequest* req,
             ::hansolo::RegistReply* resp) {
               return service->SayRegist(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Register_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Register::Service, ::hansolo::RegistePublisherRequest, ::hansolo::RegistePublisherReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Register::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hansolo::RegistePublisherRequest* req,
             ::hansolo::RegistePublisherReply* resp) {
               return service->RegistePublisher(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Register_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Register::Service, ::hansolo::RegisteSubscriberRequest, ::hansolo::RegisteSubscriberReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Register::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hansolo::RegisteSubscriberRequest* req,
             ::hansolo::RegisteSubscriberReply* resp) {
               return service->RegisteSubscriber(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Register_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Register::Service, ::hansolo::OfflineRequest, ::hansolo::OfflineReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Register::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hansolo::OfflineRequest* req,
             ::hansolo::OfflineReply* resp) {
               return service->RegistOffline(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Register_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Register::Service, ::hansolo::requestTopics, ::hansolo::replyTopics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Register::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hansolo::requestTopics* req,
             ::hansolo::replyTopics* resp) {
               return service->GetTopics(ctx, req, resp);
             }, this)));
}

Register::Service::~Service() {
}

::grpc::Status Register::Service::SayRegist(::grpc::ServerContext* context, const ::hansolo::RegistRequest* request, ::hansolo::RegistReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Register::Service::RegistePublisher(::grpc::ServerContext* context, const ::hansolo::RegistePublisherRequest* request, ::hansolo::RegistePublisherReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Register::Service::RegisteSubscriber(::grpc::ServerContext* context, const ::hansolo::RegisteSubscriberRequest* request, ::hansolo::RegisteSubscriberReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Register::Service::RegistOffline(::grpc::ServerContext* context, const ::hansolo::OfflineRequest* request, ::hansolo::OfflineReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Register::Service::GetTopics(::grpc::ServerContext* context, const ::hansolo::requestTopics* request, ::hansolo::replyTopics* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hansolo

