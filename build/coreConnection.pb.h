// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coreConnection.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_coreConnection_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_coreConnection_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_coreConnection_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_coreConnection_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_coreConnection_2eproto;
namespace hansolo {
class OfflineReply;
struct OfflineReplyDefaultTypeInternal;
extern OfflineReplyDefaultTypeInternal _OfflineReply_default_instance_;
class OfflineRequest;
struct OfflineRequestDefaultTypeInternal;
extern OfflineRequestDefaultTypeInternal _OfflineRequest_default_instance_;
class RegistReply;
struct RegistReplyDefaultTypeInternal;
extern RegistReplyDefaultTypeInternal _RegistReply_default_instance_;
class RegistRequest;
struct RegistRequestDefaultTypeInternal;
extern RegistRequestDefaultTypeInternal _RegistRequest_default_instance_;
class RegistePublisherReply;
struct RegistePublisherReplyDefaultTypeInternal;
extern RegistePublisherReplyDefaultTypeInternal _RegistePublisherReply_default_instance_;
class RegistePublisherRequest;
struct RegistePublisherRequestDefaultTypeInternal;
extern RegistePublisherRequestDefaultTypeInternal _RegistePublisherRequest_default_instance_;
class RegisteSubscriberReply;
struct RegisteSubscriberReplyDefaultTypeInternal;
extern RegisteSubscriberReplyDefaultTypeInternal _RegisteSubscriberReply_default_instance_;
class RegisteSubscriberRequest;
struct RegisteSubscriberRequestDefaultTypeInternal;
extern RegisteSubscriberRequestDefaultTypeInternal _RegisteSubscriberRequest_default_instance_;
}  // namespace hansolo
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace hansolo {
enum requestStatus : int {
  RegisteSubscribeTargetOffline = 0,
  RegisteSubscribeSuccess = 1,
  RegistNodeAlreadyHaveSameNodeName = 3,
  RegistNodeSuccess = 4,
  requestStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  requestStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool requestStatus_IsValid(int value);
extern const uint32_t requestStatus_internal_data_[];
constexpr requestStatus requestStatus_MIN = static_cast<requestStatus>(0);
constexpr requestStatus requestStatus_MAX = static_cast<requestStatus>(4);
constexpr int requestStatus_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
requestStatus_descriptor();
template <typename T>
const std::string& requestStatus_Name(T value) {
  static_assert(std::is_same<T, requestStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to requestStatus_Name().");
  return requestStatus_Name(static_cast<requestStatus>(value));
}
template <>
inline const std::string& requestStatus_Name(requestStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<requestStatus_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool requestStatus_Parse(absl::string_view name, requestStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<requestStatus>(
      requestStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RegisteSubscriberRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hansolo.RegisteSubscriberRequest) */ {
 public:
  inline RegisteSubscriberRequest() : RegisteSubscriberRequest(nullptr) {}
  ~RegisteSubscriberRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisteSubscriberRequest(::google::protobuf::internal::ConstantInitialized);

  inline RegisteSubscriberRequest(const RegisteSubscriberRequest& from)
      : RegisteSubscriberRequest(nullptr, from) {}
  RegisteSubscriberRequest(RegisteSubscriberRequest&& from) noexcept
    : RegisteSubscriberRequest() {
    *this = ::std::move(from);
  }

  inline RegisteSubscriberRequest& operator=(const RegisteSubscriberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteSubscriberRequest& operator=(RegisteSubscriberRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisteSubscriberRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisteSubscriberRequest* internal_default_instance() {
    return reinterpret_cast<const RegisteSubscriberRequest*>(
               &_RegisteSubscriberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisteSubscriberRequest& a, RegisteSubscriberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteSubscriberRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisteSubscriberRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisteSubscriberRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisteSubscriberRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisteSubscriberRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegisteSubscriberRequest& from) {
    RegisteSubscriberRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegisteSubscriberRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hansolo.RegisteSubscriberRequest";
  }
  protected:
  explicit RegisteSubscriberRequest(::google::protobuf::Arena* arena);
  RegisteSubscriberRequest(::google::protobuf::Arena* arena, const RegisteSubscriberRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
    kTopicNameFieldNumber = 2,
  };
  // string nodeName = 1;
  void clear_nodename() ;
  const std::string& nodename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nodename(Arg_&& arg, Args_... args);
  std::string* mutable_nodename();
  PROTOBUF_NODISCARD std::string* release_nodename();
  void set_allocated_nodename(std::string* value);

  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(
      const std::string& value);
  std::string* _internal_mutable_nodename();

  public:
  // string topicName = 2;
  void clear_topicname() ;
  const std::string& topicname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topicname(Arg_&& arg, Args_... args);
  std::string* mutable_topicname();
  PROTOBUF_NODISCARD std::string* release_topicname();
  void set_allocated_topicname(std::string* value);

  private:
  const std::string& _internal_topicname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topicname(
      const std::string& value);
  std::string* _internal_mutable_topicname();

  public:
  // @@protoc_insertion_point(class_scope:hansolo.RegisteSubscriberRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr nodename_;
    ::google::protobuf::internal::ArenaStringPtr topicname_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coreConnection_2eproto;
};// -------------------------------------------------------------------

class RegisteSubscriberReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hansolo.RegisteSubscriberReply) */ {
 public:
  inline RegisteSubscriberReply() : RegisteSubscriberReply(nullptr) {}
  ~RegisteSubscriberReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisteSubscriberReply(::google::protobuf::internal::ConstantInitialized);

  inline RegisteSubscriberReply(const RegisteSubscriberReply& from)
      : RegisteSubscriberReply(nullptr, from) {}
  RegisteSubscriberReply(RegisteSubscriberReply&& from) noexcept
    : RegisteSubscriberReply() {
    *this = ::std::move(from);
  }

  inline RegisteSubscriberReply& operator=(const RegisteSubscriberReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteSubscriberReply& operator=(RegisteSubscriberReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisteSubscriberReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisteSubscriberReply* internal_default_instance() {
    return reinterpret_cast<const RegisteSubscriberReply*>(
               &_RegisteSubscriberReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisteSubscriberReply& a, RegisteSubscriberReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteSubscriberReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisteSubscriberReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisteSubscriberReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisteSubscriberReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisteSubscriberReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegisteSubscriberReply& from) {
    RegisteSubscriberReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegisteSubscriberReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hansolo.RegisteSubscriberReply";
  }
  protected:
  explicit RegisteSubscriberReply(::google::protobuf::Arena* arena);
  RegisteSubscriberReply(::google::protobuf::Arena* arena, const RegisteSubscriberReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
    kTargetNodeNameFieldNumber = 2,
    kTopicNameFieldNumber = 3,
    kPortFieldNumber = 4,
    kRegistStatusFieldNumber = 5,
  };
  // string nodeName = 1;
  void clear_nodename() ;
  const std::string& nodename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nodename(Arg_&& arg, Args_... args);
  std::string* mutable_nodename();
  PROTOBUF_NODISCARD std::string* release_nodename();
  void set_allocated_nodename(std::string* value);

  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(
      const std::string& value);
  std::string* _internal_mutable_nodename();

  public:
  // string targetNodeName = 2;
  void clear_targetnodename() ;
  const std::string& targetnodename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_targetnodename(Arg_&& arg, Args_... args);
  std::string* mutable_targetnodename();
  PROTOBUF_NODISCARD std::string* release_targetnodename();
  void set_allocated_targetnodename(std::string* value);

  private:
  const std::string& _internal_targetnodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetnodename(
      const std::string& value);
  std::string* _internal_mutable_targetnodename();

  public:
  // string topicName = 3;
  void clear_topicname() ;
  const std::string& topicname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topicname(Arg_&& arg, Args_... args);
  std::string* mutable_topicname();
  PROTOBUF_NODISCARD std::string* release_topicname();
  void set_allocated_topicname(std::string* value);

  private:
  const std::string& _internal_topicname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topicname(
      const std::string& value);
  std::string* _internal_mutable_topicname();

  public:
  // int32 port = 4;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // .hansolo.requestStatus registStatus = 5;
  void clear_registstatus() ;
  ::hansolo::requestStatus registstatus() const;
  void set_registstatus(::hansolo::requestStatus value);

  private:
  ::hansolo::requestStatus _internal_registstatus() const;
  void _internal_set_registstatus(::hansolo::requestStatus value);

  public:
  // @@protoc_insertion_point(class_scope:hansolo.RegisteSubscriberReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      70, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr nodename_;
    ::google::protobuf::internal::ArenaStringPtr targetnodename_;
    ::google::protobuf::internal::ArenaStringPtr topicname_;
    ::int32_t port_;
    int registstatus_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coreConnection_2eproto;
};// -------------------------------------------------------------------

class RegistePublisherRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hansolo.RegistePublisherRequest) */ {
 public:
  inline RegistePublisherRequest() : RegistePublisherRequest(nullptr) {}
  ~RegistePublisherRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegistePublisherRequest(::google::protobuf::internal::ConstantInitialized);

  inline RegistePublisherRequest(const RegistePublisherRequest& from)
      : RegistePublisherRequest(nullptr, from) {}
  RegistePublisherRequest(RegistePublisherRequest&& from) noexcept
    : RegistePublisherRequest() {
    *this = ::std::move(from);
  }

  inline RegistePublisherRequest& operator=(const RegistePublisherRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistePublisherRequest& operator=(RegistePublisherRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegistePublisherRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegistePublisherRequest* internal_default_instance() {
    return reinterpret_cast<const RegistePublisherRequest*>(
               &_RegistePublisherRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegistePublisherRequest& a, RegistePublisherRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistePublisherRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegistePublisherRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegistePublisherRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegistePublisherRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegistePublisherRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegistePublisherRequest& from) {
    RegistePublisherRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegistePublisherRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hansolo.RegistePublisherRequest";
  }
  protected:
  explicit RegistePublisherRequest(::google::protobuf::Arena* arena);
  RegistePublisherRequest(::google::protobuf::Arena* arena, const RegistePublisherRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
    kTopicNameFieldNumber = 2,
  };
  // string nodeName = 1;
  void clear_nodename() ;
  const std::string& nodename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nodename(Arg_&& arg, Args_... args);
  std::string* mutable_nodename();
  PROTOBUF_NODISCARD std::string* release_nodename();
  void set_allocated_nodename(std::string* value);

  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(
      const std::string& value);
  std::string* _internal_mutable_nodename();

  public:
  // string topicName = 2;
  void clear_topicname() ;
  const std::string& topicname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topicname(Arg_&& arg, Args_... args);
  std::string* mutable_topicname();
  PROTOBUF_NODISCARD std::string* release_topicname();
  void set_allocated_topicname(std::string* value);

  private:
  const std::string& _internal_topicname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topicname(
      const std::string& value);
  std::string* _internal_mutable_topicname();

  public:
  // @@protoc_insertion_point(class_scope:hansolo.RegistePublisherRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr nodename_;
    ::google::protobuf::internal::ArenaStringPtr topicname_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coreConnection_2eproto;
};// -------------------------------------------------------------------

class RegistePublisherReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hansolo.RegistePublisherReply) */ {
 public:
  inline RegistePublisherReply() : RegistePublisherReply(nullptr) {}
  ~RegistePublisherReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegistePublisherReply(::google::protobuf::internal::ConstantInitialized);

  inline RegistePublisherReply(const RegistePublisherReply& from)
      : RegistePublisherReply(nullptr, from) {}
  RegistePublisherReply(RegistePublisherReply&& from) noexcept
    : RegistePublisherReply() {
    *this = ::std::move(from);
  }

  inline RegistePublisherReply& operator=(const RegistePublisherReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistePublisherReply& operator=(RegistePublisherReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegistePublisherReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegistePublisherReply* internal_default_instance() {
    return reinterpret_cast<const RegistePublisherReply*>(
               &_RegistePublisherReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegistePublisherReply& a, RegistePublisherReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistePublisherReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegistePublisherReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegistePublisherReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegistePublisherReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegistePublisherReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegistePublisherReply& from) {
    RegistePublisherReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegistePublisherReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hansolo.RegistePublisherReply";
  }
  protected:
  explicit RegistePublisherReply(::google::protobuf::Arena* arena);
  RegistePublisherReply(::google::protobuf::Arena* arena, const RegistePublisherReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
    kTopicNameFieldNumber = 2,
    kPortFieldNumber = 3,
    kRegistStatusFieldNumber = 4,
  };
  // string nodeName = 1;
  void clear_nodename() ;
  const std::string& nodename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nodename(Arg_&& arg, Args_... args);
  std::string* mutable_nodename();
  PROTOBUF_NODISCARD std::string* release_nodename();
  void set_allocated_nodename(std::string* value);

  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(
      const std::string& value);
  std::string* _internal_mutable_nodename();

  public:
  // string topicName = 2;
  void clear_topicname() ;
  const std::string& topicname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topicname(Arg_&& arg, Args_... args);
  std::string* mutable_topicname();
  PROTOBUF_NODISCARD std::string* release_topicname();
  void set_allocated_topicname(std::string* value);

  private:
  const std::string& _internal_topicname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topicname(
      const std::string& value);
  std::string* _internal_mutable_topicname();

  public:
  // int32 port = 3;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // bool registStatus = 4;
  void clear_registstatus() ;
  bool registstatus() const;
  void set_registstatus(bool value);

  private:
  bool _internal_registstatus() const;
  void _internal_set_registstatus(bool value);

  public:
  // @@protoc_insertion_point(class_scope:hansolo.RegistePublisherReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr nodename_;
    ::google::protobuf::internal::ArenaStringPtr topicname_;
    ::int32_t port_;
    bool registstatus_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coreConnection_2eproto;
};// -------------------------------------------------------------------

class RegistRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hansolo.RegistRequest) */ {
 public:
  inline RegistRequest() : RegistRequest(nullptr) {}
  ~RegistRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegistRequest(::google::protobuf::internal::ConstantInitialized);

  inline RegistRequest(const RegistRequest& from)
      : RegistRequest(nullptr, from) {}
  RegistRequest(RegistRequest&& from) noexcept
    : RegistRequest() {
    *this = ::std::move(from);
  }

  inline RegistRequest& operator=(const RegistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistRequest& operator=(RegistRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegistRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegistRequest* internal_default_instance() {
    return reinterpret_cast<const RegistRequest*>(
               &_RegistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegistRequest& a, RegistRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegistRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegistRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegistRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegistRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegistRequest& from) {
    RegistRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegistRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hansolo.RegistRequest";
  }
  protected:
  explicit RegistRequest(::google::protobuf::Arena* arena);
  RegistRequest(::google::protobuf::Arena* arena, const RegistRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
  };
  // string nodeName = 1;
  void clear_nodename() ;
  const std::string& nodename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nodename(Arg_&& arg, Args_... args);
  std::string* mutable_nodename();
  PROTOBUF_NODISCARD std::string* release_nodename();
  void set_allocated_nodename(std::string* value);

  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(
      const std::string& value);
  std::string* _internal_mutable_nodename();

  public:
  // @@protoc_insertion_point(class_scope:hansolo.RegistRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      38, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr nodename_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coreConnection_2eproto;
};// -------------------------------------------------------------------

class RegistReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hansolo.RegistReply) */ {
 public:
  inline RegistReply() : RegistReply(nullptr) {}
  ~RegistReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegistReply(::google::protobuf::internal::ConstantInitialized);

  inline RegistReply(const RegistReply& from)
      : RegistReply(nullptr, from) {}
  RegistReply(RegistReply&& from) noexcept
    : RegistReply() {
    *this = ::std::move(from);
  }

  inline RegistReply& operator=(const RegistReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistReply& operator=(RegistReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegistReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegistReply* internal_default_instance() {
    return reinterpret_cast<const RegistReply*>(
               &_RegistReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegistReply& a, RegistReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegistReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegistReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegistReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegistReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegistReply& from) {
    RegistReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegistReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hansolo.RegistReply";
  }
  protected:
  explicit RegistReply(::google::protobuf::Arena* arena);
  RegistReply(::google::protobuf::Arena* arena, const RegistReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 2,
    kStatusTypeFieldNumber = 4,
    kRegistStatusFieldNumber = 3,
  };
  // string nodeName = 2;
  void clear_nodename() ;
  const std::string& nodename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nodename(Arg_&& arg, Args_... args);
  std::string* mutable_nodename();
  PROTOBUF_NODISCARD std::string* release_nodename();
  void set_allocated_nodename(std::string* value);

  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(
      const std::string& value);
  std::string* _internal_mutable_nodename();

  public:
  // string StatusType = 4;
  void clear_statustype() ;
  const std::string& statustype() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_statustype(Arg_&& arg, Args_... args);
  std::string* mutable_statustype();
  PROTOBUF_NODISCARD std::string* release_statustype();
  void set_allocated_statustype(std::string* value);

  private:
  const std::string& _internal_statustype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statustype(
      const std::string& value);
  std::string* _internal_mutable_statustype();

  public:
  // .hansolo.requestStatus registStatus = 3;
  void clear_registstatus() ;
  ::hansolo::requestStatus registstatus() const;
  void set_registstatus(::hansolo::requestStatus value);

  private:
  ::hansolo::requestStatus _internal_registstatus() const;
  void _internal_set_registstatus(::hansolo::requestStatus value);

  public:
  // @@protoc_insertion_point(class_scope:hansolo.RegistReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr nodename_;
    ::google::protobuf::internal::ArenaStringPtr statustype_;
    int registstatus_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coreConnection_2eproto;
};// -------------------------------------------------------------------

class OfflineRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hansolo.OfflineRequest) */ {
 public:
  inline OfflineRequest() : OfflineRequest(nullptr) {}
  ~OfflineRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OfflineRequest(::google::protobuf::internal::ConstantInitialized);

  inline OfflineRequest(const OfflineRequest& from)
      : OfflineRequest(nullptr, from) {}
  OfflineRequest(OfflineRequest&& from) noexcept
    : OfflineRequest() {
    *this = ::std::move(from);
  }

  inline OfflineRequest& operator=(const OfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineRequest& operator=(OfflineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OfflineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OfflineRequest* internal_default_instance() {
    return reinterpret_cast<const OfflineRequest*>(
               &_OfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OfflineRequest& a, OfflineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OfflineRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OfflineRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OfflineRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OfflineRequest& from) {
    OfflineRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OfflineRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hansolo.OfflineRequest";
  }
  protected:
  explicit OfflineRequest(::google::protobuf::Arena* arena);
  OfflineRequest(::google::protobuf::Arena* arena, const OfflineRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string nodeName = 1;
  void clear_nodename() ;
  const std::string& nodename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nodename(Arg_&& arg, Args_... args);
  std::string* mutable_nodename();
  PROTOBUF_NODISCARD std::string* release_nodename();
  void set_allocated_nodename(std::string* value);

  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(
      const std::string& value);
  std::string* _internal_mutable_nodename();

  public:
  // int32 port = 2;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:hansolo.OfflineRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr nodename_;
    ::int32_t port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coreConnection_2eproto;
};// -------------------------------------------------------------------

class OfflineReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hansolo.OfflineReply) */ {
 public:
  inline OfflineReply() : OfflineReply(nullptr) {}
  ~OfflineReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OfflineReply(::google::protobuf::internal::ConstantInitialized);

  inline OfflineReply(const OfflineReply& from)
      : OfflineReply(nullptr, from) {}
  OfflineReply(OfflineReply&& from) noexcept
    : OfflineReply() {
    *this = ::std::move(from);
  }

  inline OfflineReply& operator=(const OfflineReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineReply& operator=(OfflineReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OfflineReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const OfflineReply* internal_default_instance() {
    return reinterpret_cast<const OfflineReply*>(
               &_OfflineReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OfflineReply& a, OfflineReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OfflineReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OfflineReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OfflineReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OfflineReply& from) {
    OfflineReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OfflineReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hansolo.OfflineReply";
  }
  protected:
  explicit OfflineReply(::google::protobuf::Arena* arena);
  OfflineReply(::google::protobuf::Arena* arena, const OfflineReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string nodeName = 2;
  void clear_nodename() ;
  const std::string& nodename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nodename(Arg_&& arg, Args_... args);
  std::string* mutable_nodename();
  PROTOBUF_NODISCARD std::string* release_nodename();
  void set_allocated_nodename(std::string* value);

  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(
      const std::string& value);
  std::string* _internal_mutable_nodename();

  public:
  // bool status = 1;
  void clear_status() ;
  bool status() const;
  void set_status(bool value);

  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);

  public:
  // @@protoc_insertion_point(class_scope:hansolo.OfflineReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr nodename_;
    bool status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coreConnection_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RegistRequest

// string nodeName = 1;
inline void RegistRequest::clear_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.ClearToEmpty();
}
inline const std::string& RegistRequest::nodename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.RegistRequest.nodeName)
  return _internal_nodename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegistRequest::set_nodename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.RegistRequest.nodeName)
}
inline std::string* RegistRequest::mutable_nodename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:hansolo.RegistRequest.nodeName)
  return _s;
}
inline const std::string& RegistRequest::_internal_nodename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodename_.Get();
}
inline void RegistRequest::_internal_set_nodename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(value, GetArena());
}
inline std::string* RegistRequest::_internal_mutable_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nodename_.Mutable( GetArena());
}
inline std::string* RegistRequest::release_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.RegistRequest.nodeName)
  return _impl_.nodename_.Release();
}
inline void RegistRequest::set_allocated_nodename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nodename_.IsDefault()) {
          _impl_.nodename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.RegistRequest.nodeName)
}

// -------------------------------------------------------------------

// RegistReply

// string nodeName = 2;
inline void RegistReply::clear_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.ClearToEmpty();
}
inline const std::string& RegistReply::nodename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.RegistReply.nodeName)
  return _internal_nodename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegistReply::set_nodename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.RegistReply.nodeName)
}
inline std::string* RegistReply::mutable_nodename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:hansolo.RegistReply.nodeName)
  return _s;
}
inline const std::string& RegistReply::_internal_nodename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodename_.Get();
}
inline void RegistReply::_internal_set_nodename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(value, GetArena());
}
inline std::string* RegistReply::_internal_mutable_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nodename_.Mutable( GetArena());
}
inline std::string* RegistReply::release_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.RegistReply.nodeName)
  return _impl_.nodename_.Release();
}
inline void RegistReply::set_allocated_nodename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nodename_.IsDefault()) {
          _impl_.nodename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.RegistReply.nodeName)
}

// .hansolo.requestStatus registStatus = 3;
inline void RegistReply::clear_registstatus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.registstatus_ = 0;
}
inline ::hansolo::requestStatus RegistReply::registstatus() const {
  // @@protoc_insertion_point(field_get:hansolo.RegistReply.registStatus)
  return _internal_registstatus();
}
inline void RegistReply::set_registstatus(::hansolo::requestStatus value) {
  _internal_set_registstatus(value);
  // @@protoc_insertion_point(field_set:hansolo.RegistReply.registStatus)
}
inline ::hansolo::requestStatus RegistReply::_internal_registstatus() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::hansolo::requestStatus>(_impl_.registstatus_);
}
inline void RegistReply::_internal_set_registstatus(::hansolo::requestStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.registstatus_ = value;
}

// string StatusType = 4;
inline void RegistReply::clear_statustype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.statustype_.ClearToEmpty();
}
inline const std::string& RegistReply::statustype() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.RegistReply.StatusType)
  return _internal_statustype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegistReply::set_statustype(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.statustype_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.RegistReply.StatusType)
}
inline std::string* RegistReply::mutable_statustype() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_statustype();
  // @@protoc_insertion_point(field_mutable:hansolo.RegistReply.StatusType)
  return _s;
}
inline const std::string& RegistReply::_internal_statustype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.statustype_.Get();
}
inline void RegistReply::_internal_set_statustype(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.statustype_.Set(value, GetArena());
}
inline std::string* RegistReply::_internal_mutable_statustype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.statustype_.Mutable( GetArena());
}
inline std::string* RegistReply::release_statustype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.RegistReply.StatusType)
  return _impl_.statustype_.Release();
}
inline void RegistReply::set_allocated_statustype(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.statustype_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.statustype_.IsDefault()) {
          _impl_.statustype_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.RegistReply.StatusType)
}

// -------------------------------------------------------------------

// RegistePublisherRequest

// string nodeName = 1;
inline void RegistePublisherRequest::clear_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.ClearToEmpty();
}
inline const std::string& RegistePublisherRequest::nodename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.RegistePublisherRequest.nodeName)
  return _internal_nodename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegistePublisherRequest::set_nodename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.RegistePublisherRequest.nodeName)
}
inline std::string* RegistePublisherRequest::mutable_nodename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:hansolo.RegistePublisherRequest.nodeName)
  return _s;
}
inline const std::string& RegistePublisherRequest::_internal_nodename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodename_.Get();
}
inline void RegistePublisherRequest::_internal_set_nodename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(value, GetArena());
}
inline std::string* RegistePublisherRequest::_internal_mutable_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nodename_.Mutable( GetArena());
}
inline std::string* RegistePublisherRequest::release_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.RegistePublisherRequest.nodeName)
  return _impl_.nodename_.Release();
}
inline void RegistePublisherRequest::set_allocated_nodename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nodename_.IsDefault()) {
          _impl_.nodename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.RegistePublisherRequest.nodeName)
}

// string topicName = 2;
inline void RegistePublisherRequest::clear_topicname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topicname_.ClearToEmpty();
}
inline const std::string& RegistePublisherRequest::topicname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.RegistePublisherRequest.topicName)
  return _internal_topicname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegistePublisherRequest::set_topicname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topicname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.RegistePublisherRequest.topicName)
}
inline std::string* RegistePublisherRequest::mutable_topicname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topicname();
  // @@protoc_insertion_point(field_mutable:hansolo.RegistePublisherRequest.topicName)
  return _s;
}
inline const std::string& RegistePublisherRequest::_internal_topicname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topicname_.Get();
}
inline void RegistePublisherRequest::_internal_set_topicname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topicname_.Set(value, GetArena());
}
inline std::string* RegistePublisherRequest::_internal_mutable_topicname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topicname_.Mutable( GetArena());
}
inline std::string* RegistePublisherRequest::release_topicname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.RegistePublisherRequest.topicName)
  return _impl_.topicname_.Release();
}
inline void RegistePublisherRequest::set_allocated_topicname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topicname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topicname_.IsDefault()) {
          _impl_.topicname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.RegistePublisherRequest.topicName)
}

// -------------------------------------------------------------------

// RegistePublisherReply

// string nodeName = 1;
inline void RegistePublisherReply::clear_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.ClearToEmpty();
}
inline const std::string& RegistePublisherReply::nodename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.RegistePublisherReply.nodeName)
  return _internal_nodename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegistePublisherReply::set_nodename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.RegistePublisherReply.nodeName)
}
inline std::string* RegistePublisherReply::mutable_nodename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:hansolo.RegistePublisherReply.nodeName)
  return _s;
}
inline const std::string& RegistePublisherReply::_internal_nodename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodename_.Get();
}
inline void RegistePublisherReply::_internal_set_nodename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(value, GetArena());
}
inline std::string* RegistePublisherReply::_internal_mutable_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nodename_.Mutable( GetArena());
}
inline std::string* RegistePublisherReply::release_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.RegistePublisherReply.nodeName)
  return _impl_.nodename_.Release();
}
inline void RegistePublisherReply::set_allocated_nodename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nodename_.IsDefault()) {
          _impl_.nodename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.RegistePublisherReply.nodeName)
}

// string topicName = 2;
inline void RegistePublisherReply::clear_topicname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topicname_.ClearToEmpty();
}
inline const std::string& RegistePublisherReply::topicname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.RegistePublisherReply.topicName)
  return _internal_topicname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegistePublisherReply::set_topicname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topicname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.RegistePublisherReply.topicName)
}
inline std::string* RegistePublisherReply::mutable_topicname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topicname();
  // @@protoc_insertion_point(field_mutable:hansolo.RegistePublisherReply.topicName)
  return _s;
}
inline const std::string& RegistePublisherReply::_internal_topicname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topicname_.Get();
}
inline void RegistePublisherReply::_internal_set_topicname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topicname_.Set(value, GetArena());
}
inline std::string* RegistePublisherReply::_internal_mutable_topicname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topicname_.Mutable( GetArena());
}
inline std::string* RegistePublisherReply::release_topicname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.RegistePublisherReply.topicName)
  return _impl_.topicname_.Release();
}
inline void RegistePublisherReply::set_allocated_topicname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topicname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topicname_.IsDefault()) {
          _impl_.topicname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.RegistePublisherReply.topicName)
}

// int32 port = 3;
inline void RegistePublisherReply::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0;
}
inline ::int32_t RegistePublisherReply::port() const {
  // @@protoc_insertion_point(field_get:hansolo.RegistePublisherReply.port)
  return _internal_port();
}
inline void RegistePublisherReply::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:hansolo.RegistePublisherReply.port)
}
inline ::int32_t RegistePublisherReply::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void RegistePublisherReply::_internal_set_port(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// bool registStatus = 4;
inline void RegistePublisherReply::clear_registstatus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.registstatus_ = false;
}
inline bool RegistePublisherReply::registstatus() const {
  // @@protoc_insertion_point(field_get:hansolo.RegistePublisherReply.registStatus)
  return _internal_registstatus();
}
inline void RegistePublisherReply::set_registstatus(bool value) {
  _internal_set_registstatus(value);
  // @@protoc_insertion_point(field_set:hansolo.RegistePublisherReply.registStatus)
}
inline bool RegistePublisherReply::_internal_registstatus() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.registstatus_;
}
inline void RegistePublisherReply::_internal_set_registstatus(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.registstatus_ = value;
}

// -------------------------------------------------------------------

// RegisteSubscriberRequest

// string nodeName = 1;
inline void RegisteSubscriberRequest::clear_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.ClearToEmpty();
}
inline const std::string& RegisteSubscriberRequest::nodename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.RegisteSubscriberRequest.nodeName)
  return _internal_nodename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteSubscriberRequest::set_nodename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.RegisteSubscriberRequest.nodeName)
}
inline std::string* RegisteSubscriberRequest::mutable_nodename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:hansolo.RegisteSubscriberRequest.nodeName)
  return _s;
}
inline const std::string& RegisteSubscriberRequest::_internal_nodename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodename_.Get();
}
inline void RegisteSubscriberRequest::_internal_set_nodename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(value, GetArena());
}
inline std::string* RegisteSubscriberRequest::_internal_mutable_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nodename_.Mutable( GetArena());
}
inline std::string* RegisteSubscriberRequest::release_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.RegisteSubscriberRequest.nodeName)
  return _impl_.nodename_.Release();
}
inline void RegisteSubscriberRequest::set_allocated_nodename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nodename_.IsDefault()) {
          _impl_.nodename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.RegisteSubscriberRequest.nodeName)
}

// string topicName = 2;
inline void RegisteSubscriberRequest::clear_topicname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topicname_.ClearToEmpty();
}
inline const std::string& RegisteSubscriberRequest::topicname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.RegisteSubscriberRequest.topicName)
  return _internal_topicname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteSubscriberRequest::set_topicname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topicname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.RegisteSubscriberRequest.topicName)
}
inline std::string* RegisteSubscriberRequest::mutable_topicname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topicname();
  // @@protoc_insertion_point(field_mutable:hansolo.RegisteSubscriberRequest.topicName)
  return _s;
}
inline const std::string& RegisteSubscriberRequest::_internal_topicname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topicname_.Get();
}
inline void RegisteSubscriberRequest::_internal_set_topicname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topicname_.Set(value, GetArena());
}
inline std::string* RegisteSubscriberRequest::_internal_mutable_topicname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topicname_.Mutable( GetArena());
}
inline std::string* RegisteSubscriberRequest::release_topicname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.RegisteSubscriberRequest.topicName)
  return _impl_.topicname_.Release();
}
inline void RegisteSubscriberRequest::set_allocated_topicname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topicname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topicname_.IsDefault()) {
          _impl_.topicname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.RegisteSubscriberRequest.topicName)
}

// -------------------------------------------------------------------

// RegisteSubscriberReply

// string nodeName = 1;
inline void RegisteSubscriberReply::clear_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.ClearToEmpty();
}
inline const std::string& RegisteSubscriberReply::nodename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.RegisteSubscriberReply.nodeName)
  return _internal_nodename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteSubscriberReply::set_nodename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.RegisteSubscriberReply.nodeName)
}
inline std::string* RegisteSubscriberReply::mutable_nodename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:hansolo.RegisteSubscriberReply.nodeName)
  return _s;
}
inline const std::string& RegisteSubscriberReply::_internal_nodename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodename_.Get();
}
inline void RegisteSubscriberReply::_internal_set_nodename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(value, GetArena());
}
inline std::string* RegisteSubscriberReply::_internal_mutable_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nodename_.Mutable( GetArena());
}
inline std::string* RegisteSubscriberReply::release_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.RegisteSubscriberReply.nodeName)
  return _impl_.nodename_.Release();
}
inline void RegisteSubscriberReply::set_allocated_nodename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nodename_.IsDefault()) {
          _impl_.nodename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.RegisteSubscriberReply.nodeName)
}

// string targetNodeName = 2;
inline void RegisteSubscriberReply::clear_targetnodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.targetnodename_.ClearToEmpty();
}
inline const std::string& RegisteSubscriberReply::targetnodename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.RegisteSubscriberReply.targetNodeName)
  return _internal_targetnodename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteSubscriberReply::set_targetnodename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.targetnodename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.RegisteSubscriberReply.targetNodeName)
}
inline std::string* RegisteSubscriberReply::mutable_targetnodename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_targetnodename();
  // @@protoc_insertion_point(field_mutable:hansolo.RegisteSubscriberReply.targetNodeName)
  return _s;
}
inline const std::string& RegisteSubscriberReply::_internal_targetnodename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.targetnodename_.Get();
}
inline void RegisteSubscriberReply::_internal_set_targetnodename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.targetnodename_.Set(value, GetArena());
}
inline std::string* RegisteSubscriberReply::_internal_mutable_targetnodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.targetnodename_.Mutable( GetArena());
}
inline std::string* RegisteSubscriberReply::release_targetnodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.RegisteSubscriberReply.targetNodeName)
  return _impl_.targetnodename_.Release();
}
inline void RegisteSubscriberReply::set_allocated_targetnodename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.targetnodename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.targetnodename_.IsDefault()) {
          _impl_.targetnodename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.RegisteSubscriberReply.targetNodeName)
}

// string topicName = 3;
inline void RegisteSubscriberReply::clear_topicname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topicname_.ClearToEmpty();
}
inline const std::string& RegisteSubscriberReply::topicname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.RegisteSubscriberReply.topicName)
  return _internal_topicname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteSubscriberReply::set_topicname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topicname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.RegisteSubscriberReply.topicName)
}
inline std::string* RegisteSubscriberReply::mutable_topicname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topicname();
  // @@protoc_insertion_point(field_mutable:hansolo.RegisteSubscriberReply.topicName)
  return _s;
}
inline const std::string& RegisteSubscriberReply::_internal_topicname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topicname_.Get();
}
inline void RegisteSubscriberReply::_internal_set_topicname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topicname_.Set(value, GetArena());
}
inline std::string* RegisteSubscriberReply::_internal_mutable_topicname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topicname_.Mutable( GetArena());
}
inline std::string* RegisteSubscriberReply::release_topicname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.RegisteSubscriberReply.topicName)
  return _impl_.topicname_.Release();
}
inline void RegisteSubscriberReply::set_allocated_topicname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topicname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topicname_.IsDefault()) {
          _impl_.topicname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.RegisteSubscriberReply.topicName)
}

// int32 port = 4;
inline void RegisteSubscriberReply::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0;
}
inline ::int32_t RegisteSubscriberReply::port() const {
  // @@protoc_insertion_point(field_get:hansolo.RegisteSubscriberReply.port)
  return _internal_port();
}
inline void RegisteSubscriberReply::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:hansolo.RegisteSubscriberReply.port)
}
inline ::int32_t RegisteSubscriberReply::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void RegisteSubscriberReply::_internal_set_port(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// .hansolo.requestStatus registStatus = 5;
inline void RegisteSubscriberReply::clear_registstatus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.registstatus_ = 0;
}
inline ::hansolo::requestStatus RegisteSubscriberReply::registstatus() const {
  // @@protoc_insertion_point(field_get:hansolo.RegisteSubscriberReply.registStatus)
  return _internal_registstatus();
}
inline void RegisteSubscriberReply::set_registstatus(::hansolo::requestStatus value) {
  _internal_set_registstatus(value);
  // @@protoc_insertion_point(field_set:hansolo.RegisteSubscriberReply.registStatus)
}
inline ::hansolo::requestStatus RegisteSubscriberReply::_internal_registstatus() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::hansolo::requestStatus>(_impl_.registstatus_);
}
inline void RegisteSubscriberReply::_internal_set_registstatus(::hansolo::requestStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.registstatus_ = value;
}

// -------------------------------------------------------------------

// OfflineRequest

// string nodeName = 1;
inline void OfflineRequest::clear_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.ClearToEmpty();
}
inline const std::string& OfflineRequest::nodename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.OfflineRequest.nodeName)
  return _internal_nodename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OfflineRequest::set_nodename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.OfflineRequest.nodeName)
}
inline std::string* OfflineRequest::mutable_nodename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:hansolo.OfflineRequest.nodeName)
  return _s;
}
inline const std::string& OfflineRequest::_internal_nodename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodename_.Get();
}
inline void OfflineRequest::_internal_set_nodename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(value, GetArena());
}
inline std::string* OfflineRequest::_internal_mutable_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nodename_.Mutable( GetArena());
}
inline std::string* OfflineRequest::release_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.OfflineRequest.nodeName)
  return _impl_.nodename_.Release();
}
inline void OfflineRequest::set_allocated_nodename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nodename_.IsDefault()) {
          _impl_.nodename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.OfflineRequest.nodeName)
}

// int32 port = 2;
inline void OfflineRequest::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0;
}
inline ::int32_t OfflineRequest::port() const {
  // @@protoc_insertion_point(field_get:hansolo.OfflineRequest.port)
  return _internal_port();
}
inline void OfflineRequest::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:hansolo.OfflineRequest.port)
}
inline ::int32_t OfflineRequest::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void OfflineRequest::_internal_set_port(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// -------------------------------------------------------------------

// OfflineReply

// bool status = 1;
inline void OfflineReply::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = false;
}
inline bool OfflineReply::status() const {
  // @@protoc_insertion_point(field_get:hansolo.OfflineReply.status)
  return _internal_status();
}
inline void OfflineReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:hansolo.OfflineReply.status)
}
inline bool OfflineReply::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void OfflineReply::_internal_set_status(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// string nodeName = 2;
inline void OfflineReply::clear_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.ClearToEmpty();
}
inline const std::string& OfflineReply::nodename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hansolo.OfflineReply.nodeName)
  return _internal_nodename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OfflineReply::set_nodename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hansolo.OfflineReply.nodeName)
}
inline std::string* OfflineReply::mutable_nodename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:hansolo.OfflineReply.nodeName)
  return _s;
}
inline const std::string& OfflineReply::_internal_nodename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodename_.Get();
}
inline void OfflineReply::_internal_set_nodename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodename_.Set(value, GetArena());
}
inline std::string* OfflineReply::_internal_mutable_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nodename_.Mutable( GetArena());
}
inline std::string* OfflineReply::release_nodename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hansolo.OfflineReply.nodeName)
  return _impl_.nodename_.Release();
}
inline void OfflineReply::set_allocated_nodename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nodename_.IsDefault()) {
          _impl_.nodename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hansolo.OfflineReply.nodeName)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace hansolo


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::hansolo::requestStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::hansolo::requestStatus>() {
  return ::hansolo::requestStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_coreConnection_2eproto_2epb_2eh
