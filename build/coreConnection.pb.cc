// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coreConnection.proto

#include "coreConnection.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace hansolo {

inline constexpr RegisteSubscriberRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nodename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topicname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RegisteSubscriberRequest::RegisteSubscriberRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RegisteSubscriberRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisteSubscriberRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisteSubscriberRequestDefaultTypeInternal() {}
  union {
    RegisteSubscriberRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisteSubscriberRequestDefaultTypeInternal _RegisteSubscriberRequest_default_instance_;

inline constexpr RegisteSubscriberReply::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nodename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        targetnodename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topicname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        port_{0},
        registstatus_{static_cast< ::hansolo::requestStatus >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RegisteSubscriberReply::RegisteSubscriberReply(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RegisteSubscriberReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisteSubscriberReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisteSubscriberReplyDefaultTypeInternal() {}
  union {
    RegisteSubscriberReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisteSubscriberReplyDefaultTypeInternal _RegisteSubscriberReply_default_instance_;

inline constexpr RegistePublisherRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nodename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topicname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RegistePublisherRequest::RegistePublisherRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RegistePublisherRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistePublisherRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistePublisherRequestDefaultTypeInternal() {}
  union {
    RegistePublisherRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistePublisherRequestDefaultTypeInternal _RegistePublisherRequest_default_instance_;

inline constexpr RegistePublisherReply::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nodename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topicname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        port_{0},
        registstatus_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RegistePublisherReply::RegistePublisherReply(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RegistePublisherReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistePublisherReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistePublisherReplyDefaultTypeInternal() {}
  union {
    RegistePublisherReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistePublisherReplyDefaultTypeInternal _RegistePublisherReply_default_instance_;

inline constexpr RegistRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nodename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RegistRequest::RegistRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RegistRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistRequestDefaultTypeInternal() {}
  union {
    RegistRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistRequestDefaultTypeInternal _RegistRequest_default_instance_;

inline constexpr RegistReply::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nodename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        statustype_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        registstatus_{static_cast< ::hansolo::requestStatus >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RegistReply::RegistReply(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RegistReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistReplyDefaultTypeInternal() {}
  union {
    RegistReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistReplyDefaultTypeInternal _RegistReply_default_instance_;

inline constexpr OfflineRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nodename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        port_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OfflineRequest::OfflineRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OfflineRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OfflineRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OfflineRequestDefaultTypeInternal() {}
  union {
    OfflineRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OfflineRequestDefaultTypeInternal _OfflineRequest_default_instance_;

inline constexpr OfflineReply::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nodename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OfflineReply::OfflineReply(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OfflineReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OfflineReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OfflineReplyDefaultTypeInternal() {}
  union {
    OfflineReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OfflineReplyDefaultTypeInternal _OfflineReply_default_instance_;
}  // namespace hansolo
static ::_pb::Metadata file_level_metadata_coreConnection_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_coreConnection_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_coreConnection_2eproto = nullptr;
const ::uint32_t TableStruct_coreConnection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistRequest, _impl_.nodename_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistReply, _impl_.nodename_),
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistReply, _impl_.registstatus_),
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistReply, _impl_.statustype_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistePublisherRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistePublisherRequest, _impl_.nodename_),
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistePublisherRequest, _impl_.topicname_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistePublisherReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistePublisherReply, _impl_.nodename_),
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistePublisherReply, _impl_.topicname_),
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistePublisherReply, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::hansolo::RegistePublisherReply, _impl_.registstatus_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hansolo::RegisteSubscriberRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hansolo::RegisteSubscriberRequest, _impl_.nodename_),
    PROTOBUF_FIELD_OFFSET(::hansolo::RegisteSubscriberRequest, _impl_.topicname_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hansolo::RegisteSubscriberReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hansolo::RegisteSubscriberReply, _impl_.nodename_),
    PROTOBUF_FIELD_OFFSET(::hansolo::RegisteSubscriberReply, _impl_.targetnodename_),
    PROTOBUF_FIELD_OFFSET(::hansolo::RegisteSubscriberReply, _impl_.topicname_),
    PROTOBUF_FIELD_OFFSET(::hansolo::RegisteSubscriberReply, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::hansolo::RegisteSubscriberReply, _impl_.registstatus_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hansolo::OfflineRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hansolo::OfflineRequest, _impl_.nodename_),
    PROTOBUF_FIELD_OFFSET(::hansolo::OfflineRequest, _impl_.port_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hansolo::OfflineReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hansolo::OfflineReply, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::hansolo::OfflineReply, _impl_.nodename_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::hansolo::RegistRequest)},
        {9, -1, -1, sizeof(::hansolo::RegistReply)},
        {20, -1, -1, sizeof(::hansolo::RegistePublisherRequest)},
        {30, -1, -1, sizeof(::hansolo::RegistePublisherReply)},
        {42, -1, -1, sizeof(::hansolo::RegisteSubscriberRequest)},
        {52, -1, -1, sizeof(::hansolo::RegisteSubscriberReply)},
        {65, -1, -1, sizeof(::hansolo::OfflineRequest)},
        {75, -1, -1, sizeof(::hansolo::OfflineReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::hansolo::_RegistRequest_default_instance_._instance,
    &::hansolo::_RegistReply_default_instance_._instance,
    &::hansolo::_RegistePublisherRequest_default_instance_._instance,
    &::hansolo::_RegistePublisherReply_default_instance_._instance,
    &::hansolo::_RegisteSubscriberRequest_default_instance_._instance,
    &::hansolo::_RegisteSubscriberReply_default_instance_._instance,
    &::hansolo::_OfflineRequest_default_instance_._instance,
    &::hansolo::_OfflineReply_default_instance_._instance,
};
const char descriptor_table_protodef_coreConnection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024coreConnection.proto\022\007hansolo\"!\n\rRegis"
    "tRequest\022\020\n\010nodeName\030\001 \001(\t\"a\n\013RegistRepl"
    "y\022\020\n\010nodeName\030\002 \001(\t\022,\n\014registStatus\030\003 \001("
    "\0162\026.hansolo.requestStatus\022\022\n\nStatusType\030"
    "\004 \001(\t\">\n\027RegistePublisherRequest\022\020\n\010node"
    "Name\030\001 \001(\t\022\021\n\ttopicName\030\002 \001(\t\"`\n\025Registe"
    "PublisherReply\022\020\n\010nodeName\030\001 \001(\t\022\021\n\ttopi"
    "cName\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\024\n\014registStatu"
    "s\030\004 \001(\010\"\?\n\030RegisteSubscriberRequest\022\020\n\010n"
    "odeName\030\001 \001(\t\022\021\n\ttopicName\030\002 \001(\t\"\221\001\n\026Reg"
    "isteSubscriberReply\022\020\n\010nodeName\030\001 \001(\t\022\026\n"
    "\016targetNodeName\030\002 \001(\t\022\021\n\ttopicName\030\003 \001(\t"
    "\022\014\n\004port\030\004 \001(\005\022,\n\014registStatus\030\005 \001(\0162\026.h"
    "ansolo.requestStatus\"0\n\016OfflineRequest\022\020"
    "\n\010nodeName\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"0\n\014Offlin"
    "eReply\022\016\n\006status\030\001 \001(\010\022\020\n\010nodeName\030\002 \001(\t"
    "*\215\001\n\rrequestStatus\022!\n\035RegisteSubscribeTa"
    "rgetOffline\020\000\022\033\n\027RegisteSubscribeSuccess"
    "\020\001\022%\n!RegistNodeAlreadyHaveSameNodeName\020"
    "\003\022\025\n\021RegistNodeSuccess\020\0042\275\002\n\010Register\022;\n"
    "\tSayRegist\022\026.hansolo.RegistRequest\032\024.han"
    "solo.RegistReply\"\000\022V\n\020RegistePublisher\022 "
    ".hansolo.RegistePublisherRequest\032\036.hanso"
    "lo.RegistePublisherReply\"\000\022Y\n\021RegisteSub"
    "scriber\022!.hansolo.RegisteSubscriberReque"
    "st\032\037.hansolo.RegisteSubscriberReply\"\000\022A\n"
    "\rRegistOffline\022\027.hansolo.OfflineRequest\032"
    "\025.hansolo.OfflineReply\"\000b\006proto3"
};
static ::absl::once_flag descriptor_table_coreConnection_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_coreConnection_2eproto = {
    false,
    false,
    1112,
    descriptor_table_protodef_coreConnection_2eproto,
    "coreConnection.proto",
    &descriptor_table_coreConnection_2eproto_once,
    nullptr,
    0,
    8,
    schemas,
    file_default_instances,
    TableStruct_coreConnection_2eproto::offsets,
    file_level_metadata_coreConnection_2eproto,
    file_level_enum_descriptors_coreConnection_2eproto,
    file_level_service_descriptors_coreConnection_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_coreConnection_2eproto_getter() {
  return &descriptor_table_coreConnection_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_coreConnection_2eproto(&descriptor_table_coreConnection_2eproto);
namespace hansolo {
const ::google::protobuf::EnumDescriptor* requestStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_coreConnection_2eproto);
  return file_level_enum_descriptors_coreConnection_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t requestStatus_internal_data_[] = {
    131072u, 32u, 6u, };
bool requestStatus_IsValid(int value) {
  return 0 <= value && value <= 4 && ((27u >> value) & 1) != 0;
}
// ===================================================================

class RegistRequest::_Internal {
 public:
};

RegistRequest::RegistRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hansolo.RegistRequest)
}
inline PROTOBUF_NDEBUG_INLINE RegistRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nodename_(arena, from.nodename_),
        _cached_size_{0} {}

RegistRequest::RegistRequest(
    ::google::protobuf::Arena* arena,
    const RegistRequest& from)
    : ::google::protobuf::Message(arena) {
  RegistRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:hansolo.RegistRequest)
}
inline PROTOBUF_NDEBUG_INLINE RegistRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nodename_(arena),
        _cached_size_{0} {}

inline void RegistRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RegistRequest::~RegistRequest() {
  // @@protoc_insertion_point(destructor:hansolo.RegistRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RegistRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.nodename_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RegistRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hansolo.RegistRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodename_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RegistRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 38, 2> RegistRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RegistRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string nodeName = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RegistRequest, _impl_.nodename_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string nodeName = 1;
    {PROTOBUF_FIELD_OFFSET(RegistRequest, _impl_.nodename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\25\10\0\0\0\0\0\0"
    "hansolo.RegistRequest"
    "nodeName"
  }},
};

::uint8_t* RegistRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hansolo.RegistRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    const std::string& _s = this->_internal_nodename();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.RegistRequest.nodeName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hansolo.RegistRequest)
  return target;
}

::size_t RegistRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hansolo.RegistRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nodename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RegistRequest::_class_data_ = {
    RegistRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RegistRequest::GetClassData() const {
  return &_class_data_;
}

void RegistRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RegistRequest*>(&to_msg);
  auto& from = static_cast<const RegistRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hansolo.RegistRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RegistRequest::CopyFrom(const RegistRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hansolo.RegistRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RegistRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RegistRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RegistRequest::InternalSwap(RegistRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nodename_, &other->_impl_.nodename_, arena);
}

::google::protobuf::Metadata RegistRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coreConnection_2eproto_getter, &descriptor_table_coreConnection_2eproto_once,
      file_level_metadata_coreConnection_2eproto[0]);
}
// ===================================================================

class RegistReply::_Internal {
 public:
};

RegistReply::RegistReply(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hansolo.RegistReply)
}
inline PROTOBUF_NDEBUG_INLINE RegistReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nodename_(arena, from.nodename_),
        statustype_(arena, from.statustype_),
        _cached_size_{0} {}

RegistReply::RegistReply(
    ::google::protobuf::Arena* arena,
    const RegistReply& from)
    : ::google::protobuf::Message(arena) {
  RegistReply* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.registstatus_ = from._impl_.registstatus_;

  // @@protoc_insertion_point(copy_constructor:hansolo.RegistReply)
}
inline PROTOBUF_NDEBUG_INLINE RegistReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nodename_(arena),
        statustype_(arena),
        _cached_size_{0} {}

inline void RegistReply::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.registstatus_ = {};
}
RegistReply::~RegistReply() {
  // @@protoc_insertion_point(destructor:hansolo.RegistReply)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RegistReply::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.nodename_.Destroy();
  _impl_.statustype_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RegistReply::Clear() {
// @@protoc_insertion_point(message_clear_start:hansolo.RegistReply)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodename_.ClearToEmpty();
  _impl_.statustype_.ClearToEmpty();
  _impl_.registstatus_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RegistReply::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 46, 2> RegistReply::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967281,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RegistReply_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string StatusType = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RegistReply, _impl_.statustype_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string nodeName = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RegistReply, _impl_.nodename_)}},
    // .hansolo.requestStatus registStatus = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RegistReply, _impl_.registstatus_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RegistReply, _impl_.registstatus_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string nodeName = 2;
    {PROTOBUF_FIELD_OFFSET(RegistReply, _impl_.nodename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .hansolo.requestStatus registStatus = 3;
    {PROTOBUF_FIELD_OFFSET(RegistReply, _impl_.registstatus_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string StatusType = 4;
    {PROTOBUF_FIELD_OFFSET(RegistReply, _impl_.statustype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\10\0\12\0\0\0\0"
    "hansolo.RegistReply"
    "nodeName"
    "StatusType"
  }},
};

::uint8_t* RegistReply::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hansolo.RegistReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string nodeName = 2;
  if (!this->_internal_nodename().empty()) {
    const std::string& _s = this->_internal_nodename();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.RegistReply.nodeName");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .hansolo.requestStatus registStatus = 3;
  if (this->_internal_registstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_registstatus(), target);
  }

  // string StatusType = 4;
  if (!this->_internal_statustype().empty()) {
    const std::string& _s = this->_internal_statustype();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.RegistReply.StatusType");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hansolo.RegistReply)
  return target;
}

::size_t RegistReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hansolo.RegistReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeName = 2;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nodename());
  }

  // string StatusType = 4;
  if (!this->_internal_statustype().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_statustype());
  }

  // .hansolo.requestStatus registStatus = 3;
  if (this->_internal_registstatus() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_registstatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RegistReply::_class_data_ = {
    RegistReply::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RegistReply::GetClassData() const {
  return &_class_data_;
}

void RegistReply::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RegistReply*>(&to_msg);
  auto& from = static_cast<const RegistReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hansolo.RegistReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  if (!from._internal_statustype().empty()) {
    _this->_internal_set_statustype(from._internal_statustype());
  }
  if (from._internal_registstatus() != 0) {
    _this->_internal_set_registstatus(from._internal_registstatus());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RegistReply::CopyFrom(const RegistReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hansolo.RegistReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RegistReply::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RegistReply::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RegistReply::InternalSwap(RegistReply* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nodename_, &other->_impl_.nodename_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.statustype_, &other->_impl_.statustype_, arena);
  swap(_impl_.registstatus_, other->_impl_.registstatus_);
}

::google::protobuf::Metadata RegistReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coreConnection_2eproto_getter, &descriptor_table_coreConnection_2eproto_once,
      file_level_metadata_coreConnection_2eproto[1]);
}
// ===================================================================

class RegistePublisherRequest::_Internal {
 public:
};

RegistePublisherRequest::RegistePublisherRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hansolo.RegistePublisherRequest)
}
inline PROTOBUF_NDEBUG_INLINE RegistePublisherRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nodename_(arena, from.nodename_),
        topicname_(arena, from.topicname_),
        _cached_size_{0} {}

RegistePublisherRequest::RegistePublisherRequest(
    ::google::protobuf::Arena* arena,
    const RegistePublisherRequest& from)
    : ::google::protobuf::Message(arena) {
  RegistePublisherRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:hansolo.RegistePublisherRequest)
}
inline PROTOBUF_NDEBUG_INLINE RegistePublisherRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nodename_(arena),
        topicname_(arena),
        _cached_size_{0} {}

inline void RegistePublisherRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RegistePublisherRequest::~RegistePublisherRequest() {
  // @@protoc_insertion_point(destructor:hansolo.RegistePublisherRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RegistePublisherRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.nodename_.Destroy();
  _impl_.topicname_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RegistePublisherRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hansolo.RegistePublisherRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodename_.ClearToEmpty();
  _impl_.topicname_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RegistePublisherRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 57, 2> RegistePublisherRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RegistePublisherRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string topicName = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RegistePublisherRequest, _impl_.topicname_)}},
    // string nodeName = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RegistePublisherRequest, _impl_.nodename_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string nodeName = 1;
    {PROTOBUF_FIELD_OFFSET(RegistePublisherRequest, _impl_.nodename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string topicName = 2;
    {PROTOBUF_FIELD_OFFSET(RegistePublisherRequest, _impl_.topicname_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\37\10\11\0\0\0\0\0"
    "hansolo.RegistePublisherRequest"
    "nodeName"
    "topicName"
  }},
};

::uint8_t* RegistePublisherRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hansolo.RegistePublisherRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    const std::string& _s = this->_internal_nodename();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.RegistePublisherRequest.nodeName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string topicName = 2;
  if (!this->_internal_topicname().empty()) {
    const std::string& _s = this->_internal_topicname();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.RegistePublisherRequest.topicName");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hansolo.RegistePublisherRequest)
  return target;
}

::size_t RegistePublisherRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hansolo.RegistePublisherRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nodename());
  }

  // string topicName = 2;
  if (!this->_internal_topicname().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_topicname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RegistePublisherRequest::_class_data_ = {
    RegistePublisherRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RegistePublisherRequest::GetClassData() const {
  return &_class_data_;
}

void RegistePublisherRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RegistePublisherRequest*>(&to_msg);
  auto& from = static_cast<const RegistePublisherRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hansolo.RegistePublisherRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  if (!from._internal_topicname().empty()) {
    _this->_internal_set_topicname(from._internal_topicname());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RegistePublisherRequest::CopyFrom(const RegistePublisherRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hansolo.RegistePublisherRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RegistePublisherRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RegistePublisherRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RegistePublisherRequest::InternalSwap(RegistePublisherRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nodename_, &other->_impl_.nodename_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topicname_, &other->_impl_.topicname_, arena);
}

::google::protobuf::Metadata RegistePublisherRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coreConnection_2eproto_getter, &descriptor_table_coreConnection_2eproto_once,
      file_level_metadata_coreConnection_2eproto[2]);
}
// ===================================================================

class RegistePublisherReply::_Internal {
 public:
};

RegistePublisherReply::RegistePublisherReply(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hansolo.RegistePublisherReply)
}
inline PROTOBUF_NDEBUG_INLINE RegistePublisherReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nodename_(arena, from.nodename_),
        topicname_(arena, from.topicname_),
        _cached_size_{0} {}

RegistePublisherReply::RegistePublisherReply(
    ::google::protobuf::Arena* arena,
    const RegistePublisherReply& from)
    : ::google::protobuf::Message(arena) {
  RegistePublisherReply* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, port_),
           offsetof(Impl_, registstatus_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::registstatus_));

  // @@protoc_insertion_point(copy_constructor:hansolo.RegistePublisherReply)
}
inline PROTOBUF_NDEBUG_INLINE RegistePublisherReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nodename_(arena),
        topicname_(arena),
        _cached_size_{0} {}

inline void RegistePublisherReply::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           0,
           offsetof(Impl_, registstatus_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::registstatus_));
}
RegistePublisherReply::~RegistePublisherReply() {
  // @@protoc_insertion_point(destructor:hansolo.RegistePublisherReply)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RegistePublisherReply::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.nodename_.Destroy();
  _impl_.topicname_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RegistePublisherReply::Clear() {
// @@protoc_insertion_point(message_clear_start:hansolo.RegistePublisherReply)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodename_.ClearToEmpty();
  _impl_.topicname_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.registstatus_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.registstatus_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RegistePublisherReply::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 55, 2> RegistePublisherReply::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RegistePublisherReply_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool registStatus = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RegistePublisherReply, _impl_.registstatus_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RegistePublisherReply, _impl_.registstatus_)}},
    // string nodeName = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RegistePublisherReply, _impl_.nodename_)}},
    // string topicName = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RegistePublisherReply, _impl_.topicname_)}},
    // int32 port = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RegistePublisherReply, _impl_.port_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RegistePublisherReply, _impl_.port_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string nodeName = 1;
    {PROTOBUF_FIELD_OFFSET(RegistePublisherReply, _impl_.nodename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string topicName = 2;
    {PROTOBUF_FIELD_OFFSET(RegistePublisherReply, _impl_.topicname_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 port = 3;
    {PROTOBUF_FIELD_OFFSET(RegistePublisherReply, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool registStatus = 4;
    {PROTOBUF_FIELD_OFFSET(RegistePublisherReply, _impl_.registstatus_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\35\10\11\0\0\0\0\0"
    "hansolo.RegistePublisherReply"
    "nodeName"
    "topicName"
  }},
};

::uint8_t* RegistePublisherReply::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hansolo.RegistePublisherReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    const std::string& _s = this->_internal_nodename();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.RegistePublisherReply.nodeName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string topicName = 2;
  if (!this->_internal_topicname().empty()) {
    const std::string& _s = this->_internal_topicname();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.RegistePublisherReply.topicName");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_port(), target);
  }

  // bool registStatus = 4;
  if (this->_internal_registstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_registstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hansolo.RegistePublisherReply)
  return target;
}

::size_t RegistePublisherReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hansolo.RegistePublisherReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nodename());
  }

  // string topicName = 2;
  if (!this->_internal_topicname().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_topicname());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_port());
  }

  // bool registStatus = 4;
  if (this->_internal_registstatus() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RegistePublisherReply::_class_data_ = {
    RegistePublisherReply::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RegistePublisherReply::GetClassData() const {
  return &_class_data_;
}

void RegistePublisherReply::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RegistePublisherReply*>(&to_msg);
  auto& from = static_cast<const RegistePublisherReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hansolo.RegistePublisherReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  if (!from._internal_topicname().empty()) {
    _this->_internal_set_topicname(from._internal_topicname());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_registstatus() != 0) {
    _this->_internal_set_registstatus(from._internal_registstatus());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RegistePublisherReply::CopyFrom(const RegistePublisherReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hansolo.RegistePublisherReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RegistePublisherReply::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RegistePublisherReply::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RegistePublisherReply::InternalSwap(RegistePublisherReply* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nodename_, &other->_impl_.nodename_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topicname_, &other->_impl_.topicname_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegistePublisherReply, _impl_.registstatus_)
      + sizeof(RegistePublisherReply::_impl_.registstatus_)
      - PROTOBUF_FIELD_OFFSET(RegistePublisherReply, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::google::protobuf::Metadata RegistePublisherReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coreConnection_2eproto_getter, &descriptor_table_coreConnection_2eproto_once,
      file_level_metadata_coreConnection_2eproto[3]);
}
// ===================================================================

class RegisteSubscriberRequest::_Internal {
 public:
};

RegisteSubscriberRequest::RegisteSubscriberRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hansolo.RegisteSubscriberRequest)
}
inline PROTOBUF_NDEBUG_INLINE RegisteSubscriberRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nodename_(arena, from.nodename_),
        topicname_(arena, from.topicname_),
        _cached_size_{0} {}

RegisteSubscriberRequest::RegisteSubscriberRequest(
    ::google::protobuf::Arena* arena,
    const RegisteSubscriberRequest& from)
    : ::google::protobuf::Message(arena) {
  RegisteSubscriberRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:hansolo.RegisteSubscriberRequest)
}
inline PROTOBUF_NDEBUG_INLINE RegisteSubscriberRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nodename_(arena),
        topicname_(arena),
        _cached_size_{0} {}

inline void RegisteSubscriberRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RegisteSubscriberRequest::~RegisteSubscriberRequest() {
  // @@protoc_insertion_point(destructor:hansolo.RegisteSubscriberRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RegisteSubscriberRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.nodename_.Destroy();
  _impl_.topicname_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RegisteSubscriberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hansolo.RegisteSubscriberRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodename_.ClearToEmpty();
  _impl_.topicname_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RegisteSubscriberRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 58, 2> RegisteSubscriberRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RegisteSubscriberRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string topicName = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RegisteSubscriberRequest, _impl_.topicname_)}},
    // string nodeName = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RegisteSubscriberRequest, _impl_.nodename_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string nodeName = 1;
    {PROTOBUF_FIELD_OFFSET(RegisteSubscriberRequest, _impl_.nodename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string topicName = 2;
    {PROTOBUF_FIELD_OFFSET(RegisteSubscriberRequest, _impl_.topicname_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\40\10\11\0\0\0\0\0"
    "hansolo.RegisteSubscriberRequest"
    "nodeName"
    "topicName"
  }},
};

::uint8_t* RegisteSubscriberRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hansolo.RegisteSubscriberRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    const std::string& _s = this->_internal_nodename();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.RegisteSubscriberRequest.nodeName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string topicName = 2;
  if (!this->_internal_topicname().empty()) {
    const std::string& _s = this->_internal_topicname();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.RegisteSubscriberRequest.topicName");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hansolo.RegisteSubscriberRequest)
  return target;
}

::size_t RegisteSubscriberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hansolo.RegisteSubscriberRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nodename());
  }

  // string topicName = 2;
  if (!this->_internal_topicname().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_topicname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RegisteSubscriberRequest::_class_data_ = {
    RegisteSubscriberRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RegisteSubscriberRequest::GetClassData() const {
  return &_class_data_;
}

void RegisteSubscriberRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RegisteSubscriberRequest*>(&to_msg);
  auto& from = static_cast<const RegisteSubscriberRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hansolo.RegisteSubscriberRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  if (!from._internal_topicname().empty()) {
    _this->_internal_set_topicname(from._internal_topicname());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RegisteSubscriberRequest::CopyFrom(const RegisteSubscriberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hansolo.RegisteSubscriberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RegisteSubscriberRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RegisteSubscriberRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RegisteSubscriberRequest::InternalSwap(RegisteSubscriberRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nodename_, &other->_impl_.nodename_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topicname_, &other->_impl_.topicname_, arena);
}

::google::protobuf::Metadata RegisteSubscriberRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coreConnection_2eproto_getter, &descriptor_table_coreConnection_2eproto_once,
      file_level_metadata_coreConnection_2eproto[4]);
}
// ===================================================================

class RegisteSubscriberReply::_Internal {
 public:
};

RegisteSubscriberReply::RegisteSubscriberReply(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hansolo.RegisteSubscriberReply)
}
inline PROTOBUF_NDEBUG_INLINE RegisteSubscriberReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nodename_(arena, from.nodename_),
        targetnodename_(arena, from.targetnodename_),
        topicname_(arena, from.topicname_),
        _cached_size_{0} {}

RegisteSubscriberReply::RegisteSubscriberReply(
    ::google::protobuf::Arena* arena,
    const RegisteSubscriberReply& from)
    : ::google::protobuf::Message(arena) {
  RegisteSubscriberReply* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, port_),
           offsetof(Impl_, registstatus_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::registstatus_));

  // @@protoc_insertion_point(copy_constructor:hansolo.RegisteSubscriberReply)
}
inline PROTOBUF_NDEBUG_INLINE RegisteSubscriberReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nodename_(arena),
        targetnodename_(arena),
        topicname_(arena),
        _cached_size_{0} {}

inline void RegisteSubscriberReply::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           0,
           offsetof(Impl_, registstatus_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::registstatus_));
}
RegisteSubscriberReply::~RegisteSubscriberReply() {
  // @@protoc_insertion_point(destructor:hansolo.RegisteSubscriberReply)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RegisteSubscriberReply::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.nodename_.Destroy();
  _impl_.targetnodename_.Destroy();
  _impl_.topicname_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RegisteSubscriberReply::Clear() {
// @@protoc_insertion_point(message_clear_start:hansolo.RegisteSubscriberReply)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodename_.ClearToEmpty();
  _impl_.targetnodename_.ClearToEmpty();
  _impl_.topicname_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.registstatus_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.registstatus_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RegisteSubscriberReply::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 70, 2> RegisteSubscriberReply::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RegisteSubscriberReply_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string nodeName = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RegisteSubscriberReply, _impl_.nodename_)}},
    // string targetNodeName = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RegisteSubscriberReply, _impl_.targetnodename_)}},
    // string topicName = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RegisteSubscriberReply, _impl_.topicname_)}},
    // int32 port = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RegisteSubscriberReply, _impl_.port_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RegisteSubscriberReply, _impl_.port_)}},
    // .hansolo.requestStatus registStatus = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RegisteSubscriberReply, _impl_.registstatus_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RegisteSubscriberReply, _impl_.registstatus_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string nodeName = 1;
    {PROTOBUF_FIELD_OFFSET(RegisteSubscriberReply, _impl_.nodename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string targetNodeName = 2;
    {PROTOBUF_FIELD_OFFSET(RegisteSubscriberReply, _impl_.targetnodename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string topicName = 3;
    {PROTOBUF_FIELD_OFFSET(RegisteSubscriberReply, _impl_.topicname_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 port = 4;
    {PROTOBUF_FIELD_OFFSET(RegisteSubscriberReply, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .hansolo.requestStatus registStatus = 5;
    {PROTOBUF_FIELD_OFFSET(RegisteSubscriberReply, _impl_.registstatus_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\36\10\16\11\0\0\0\0"
    "hansolo.RegisteSubscriberReply"
    "nodeName"
    "targetNodeName"
    "topicName"
  }},
};

::uint8_t* RegisteSubscriberReply::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hansolo.RegisteSubscriberReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    const std::string& _s = this->_internal_nodename();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.RegisteSubscriberReply.nodeName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string targetNodeName = 2;
  if (!this->_internal_targetnodename().empty()) {
    const std::string& _s = this->_internal_targetnodename();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.RegisteSubscriberReply.targetNodeName");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string topicName = 3;
  if (!this->_internal_topicname().empty()) {
    const std::string& _s = this->_internal_topicname();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.RegisteSubscriberReply.topicName");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_port(), target);
  }

  // .hansolo.requestStatus registStatus = 5;
  if (this->_internal_registstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_registstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hansolo.RegisteSubscriberReply)
  return target;
}

::size_t RegisteSubscriberReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hansolo.RegisteSubscriberReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nodename());
  }

  // string targetNodeName = 2;
  if (!this->_internal_targetnodename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_targetnodename());
  }

  // string topicName = 3;
  if (!this->_internal_topicname().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_topicname());
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_port());
  }

  // .hansolo.requestStatus registStatus = 5;
  if (this->_internal_registstatus() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_registstatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RegisteSubscriberReply::_class_data_ = {
    RegisteSubscriberReply::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RegisteSubscriberReply::GetClassData() const {
  return &_class_data_;
}

void RegisteSubscriberReply::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RegisteSubscriberReply*>(&to_msg);
  auto& from = static_cast<const RegisteSubscriberReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hansolo.RegisteSubscriberReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  if (!from._internal_targetnodename().empty()) {
    _this->_internal_set_targetnodename(from._internal_targetnodename());
  }
  if (!from._internal_topicname().empty()) {
    _this->_internal_set_topicname(from._internal_topicname());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_registstatus() != 0) {
    _this->_internal_set_registstatus(from._internal_registstatus());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RegisteSubscriberReply::CopyFrom(const RegisteSubscriberReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hansolo.RegisteSubscriberReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RegisteSubscriberReply::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RegisteSubscriberReply::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RegisteSubscriberReply::InternalSwap(RegisteSubscriberReply* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nodename_, &other->_impl_.nodename_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.targetnodename_, &other->_impl_.targetnodename_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topicname_, &other->_impl_.topicname_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisteSubscriberReply, _impl_.registstatus_)
      + sizeof(RegisteSubscriberReply::_impl_.registstatus_)
      - PROTOBUF_FIELD_OFFSET(RegisteSubscriberReply, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::google::protobuf::Metadata RegisteSubscriberReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coreConnection_2eproto_getter, &descriptor_table_coreConnection_2eproto_once,
      file_level_metadata_coreConnection_2eproto[5]);
}
// ===================================================================

class OfflineRequest::_Internal {
 public:
};

OfflineRequest::OfflineRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hansolo.OfflineRequest)
}
inline PROTOBUF_NDEBUG_INLINE OfflineRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nodename_(arena, from.nodename_),
        _cached_size_{0} {}

OfflineRequest::OfflineRequest(
    ::google::protobuf::Arena* arena,
    const OfflineRequest& from)
    : ::google::protobuf::Message(arena) {
  OfflineRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.port_ = from._impl_.port_;

  // @@protoc_insertion_point(copy_constructor:hansolo.OfflineRequest)
}
inline PROTOBUF_NDEBUG_INLINE OfflineRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nodename_(arena),
        _cached_size_{0} {}

inline void OfflineRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.port_ = {};
}
OfflineRequest::~OfflineRequest() {
  // @@protoc_insertion_point(destructor:hansolo.OfflineRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OfflineRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.nodename_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OfflineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hansolo.OfflineRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodename_.ClearToEmpty();
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OfflineRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 39, 2> OfflineRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OfflineRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 port = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OfflineRequest, _impl_.port_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(OfflineRequest, _impl_.port_)}},
    // string nodeName = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OfflineRequest, _impl_.nodename_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string nodeName = 1;
    {PROTOBUF_FIELD_OFFSET(OfflineRequest, _impl_.nodename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 port = 2;
    {PROTOBUF_FIELD_OFFSET(OfflineRequest, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\26\10\0\0\0\0\0\0"
    "hansolo.OfflineRequest"
    "nodeName"
  }},
};

::uint8_t* OfflineRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hansolo.OfflineRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    const std::string& _s = this->_internal_nodename();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.OfflineRequest.nodeName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hansolo.OfflineRequest)
  return target;
}

::size_t OfflineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hansolo.OfflineRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeName = 1;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nodename());
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OfflineRequest::_class_data_ = {
    OfflineRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OfflineRequest::GetClassData() const {
  return &_class_data_;
}

void OfflineRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OfflineRequest*>(&to_msg);
  auto& from = static_cast<const OfflineRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hansolo.OfflineRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OfflineRequest::CopyFrom(const OfflineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hansolo.OfflineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OfflineRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OfflineRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OfflineRequest::InternalSwap(OfflineRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nodename_, &other->_impl_.nodename_, arena);
        swap(_impl_.port_, other->_impl_.port_);
}

::google::protobuf::Metadata OfflineRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coreConnection_2eproto_getter, &descriptor_table_coreConnection_2eproto_once,
      file_level_metadata_coreConnection_2eproto[6]);
}
// ===================================================================

class OfflineReply::_Internal {
 public:
};

OfflineReply::OfflineReply(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hansolo.OfflineReply)
}
inline PROTOBUF_NDEBUG_INLINE OfflineReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nodename_(arena, from.nodename_),
        _cached_size_{0} {}

OfflineReply::OfflineReply(
    ::google::protobuf::Arena* arena,
    const OfflineReply& from)
    : ::google::protobuf::Message(arena) {
  OfflineReply* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.status_ = from._impl_.status_;

  // @@protoc_insertion_point(copy_constructor:hansolo.OfflineReply)
}
inline PROTOBUF_NDEBUG_INLINE OfflineReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nodename_(arena),
        _cached_size_{0} {}

inline void OfflineReply::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.status_ = {};
}
OfflineReply::~OfflineReply() {
  // @@protoc_insertion_point(destructor:hansolo.OfflineReply)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OfflineReply::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.nodename_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OfflineReply::Clear() {
// @@protoc_insertion_point(message_clear_start:hansolo.OfflineReply)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodename_.ClearToEmpty();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OfflineReply::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 37, 2> OfflineReply::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OfflineReply_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string nodeName = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(OfflineReply, _impl_.nodename_)}},
    // bool status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(OfflineReply, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(OfflineReply, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool status = 1;
    {PROTOBUF_FIELD_OFFSET(OfflineReply, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string nodeName = 2;
    {PROTOBUF_FIELD_OFFSET(OfflineReply, _impl_.nodename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\0\10\0\0\0\0\0"
    "hansolo.OfflineReply"
    "nodeName"
  }},
};

::uint8_t* OfflineReply::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hansolo.OfflineReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_status(), target);
  }

  // string nodeName = 2;
  if (!this->_internal_nodename().empty()) {
    const std::string& _s = this->_internal_nodename();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hansolo.OfflineReply.nodeName");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hansolo.OfflineReply)
  return target;
}

::size_t OfflineReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hansolo.OfflineReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeName = 2;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nodename());
  }

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OfflineReply::_class_data_ = {
    OfflineReply::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* OfflineReply::GetClassData() const {
  return &_class_data_;
}

void OfflineReply::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OfflineReply*>(&to_msg);
  auto& from = static_cast<const OfflineReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hansolo.OfflineReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OfflineReply::CopyFrom(const OfflineReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hansolo.OfflineReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OfflineReply::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OfflineReply::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OfflineReply::InternalSwap(OfflineReply* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nodename_, &other->_impl_.nodename_, arena);
        swap(_impl_.status_, other->_impl_.status_);
}

::google::protobuf::Metadata OfflineReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coreConnection_2eproto_getter, &descriptor_table_coreConnection_2eproto_once,
      file_level_metadata_coreConnection_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace hansolo
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
